//! ========================================================
//! |                  ****WARNING****                     |
//! | This file is auto-generated!  Do NOT edit this file. |
//! | Profile Version = ???                                |
//! | Build Date = ???                                     |
//! ========================================================
#![allow(missing_docs)]
#![allow(dead_code, unused)]
#![allow(clippy::unreadable_literal, clippy::type_complexity)]
use super::types;
use crate::bit_reader::BitReader;
use crate::fit;
use chrono::{TimeZone, Utc};
use std::collections::HashMap;
use std::fmt;
use std::ops::{Deref, Div, Sub};

#[derive(Debug, Clone)]
pub(crate) struct Field {
    pub(crate) name: &'static str,
    pub(crate) value: fit::Value,
    pub(crate) is_subfield: bool,
}
impl fmt::Display for Field {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.value.fmt(f)
    }
}
#[derive(Debug, Clone)]
pub(crate) struct MessageDecodeArgs<'input> {
    pub(crate) msg_ty: &'input types::MesgNum,
    pub(crate) msg_no: u16,
    pub(crate) field_no: u8,
    pub(crate) value: &'input fit::Value,
    pub(crate) fields: &'input HashMap<u8, fit::Value>,
}

struct TransformValueArgs<'input, R: ToString> {
    pub field_ty: &'static str,
    pub msg_ty: &'input types::MesgNum,
    pub scale: f64,
    pub offset: f64,
    pub units: &'static str,
    pub ty_to_str: Box<dyn Fn(&fit::Value) -> Option<R>>,
    pub is_base_type: bool,
    pub array: Option<usize>,
}

impl Sub<f64> for fit::Value {
    type Output = Result<fit::Value, &'static str>;
    fn sub(self, rhs: f64) -> Self::Output {
        match self {
            fit::Value::SInt8(val) => Ok(fit::Value::SInt8((val as f64 - rhs) as i8)),
            fit::Value::UInt8(val) => Ok(fit::Value::UInt8((val as f64 - rhs) as u8)),
            fit::Value::SInt16(val) => Ok(fit::Value::SInt16((val as f64 - rhs) as i16)),
            fit::Value::UInt16(val) => Ok(fit::Value::UInt16((val as f64 - rhs) as u16)),
            fit::Value::SInt32(val) => Ok(fit::Value::SInt32((val as f64 - rhs) as i32)),
            fit::Value::UInt32(val) => Ok(fit::Value::UInt32((val as f64 - rhs) as u32)),
            fit::Value::Float32(val) => Ok(fit::Value::Float32((val as f64 - rhs) as f32)),
            fit::Value::Float64(val) => Ok(fit::Value::Float64(val - rhs)),
            fit::Value::UInt8z(val) => Ok(fit::Value::UInt8z((val as f64 - rhs) as u8)),
            fit::Value::UInt16z(val) => Ok(fit::Value::UInt16z((val as f64 - rhs) as u16)),
            fit::Value::UInt32z(val) => Ok(fit::Value::UInt32z((val as f64 - rhs) as u32)),
            fit::Value::Byte(val) => Ok(fit::Value::Byte((val as f64 - rhs) as u8)),
            fit::Value::SInt64(val) => Ok(fit::Value::SInt64((val as f64 - rhs) as i64)),
            fit::Value::UInt64(val) => Ok(fit::Value::UInt64((val as f64 - rhs) as u64)),
            fit::Value::UInt64z(val) => Ok(fit::Value::UInt64z((val as f64 - rhs) as u64)),
            _ => Err("Unsupported operation: Value variant cannot be subtracted with f64"),
        }
    }
}
impl Div<f64> for fit::Value {
    type Output = Result<fit::Value, &'static str>;
    fn div(self, rhs: f64) -> Self::Output {
        match self {
            fit::Value::SInt8(val) => Ok(fit::Value::SInt8((val as f64 / rhs) as i8)),
            fit::Value::UInt8(val) => Ok(fit::Value::UInt8((val as f64 / rhs) as u8)),
            fit::Value::SInt16(val) => Ok(fit::Value::SInt16((val as f64 / rhs) as i16)),
            fit::Value::UInt16(val) => Ok(fit::Value::UInt16((val as f64 / rhs) as u16)),
            fit::Value::SInt32(val) => Ok(fit::Value::SInt32((val as f64 / rhs) as i32)),
            fit::Value::UInt32(val) => Ok(fit::Value::UInt32((val as f64 / rhs) as u32)),
            fit::Value::Float32(val) => Ok(fit::Value::Float32((val as f64 / rhs) as f32)),
            fit::Value::Float64(val) => Ok(fit::Value::Float64(val / rhs)),
            fit::Value::UInt8z(val) => Ok(fit::Value::UInt8z((val as f64 / rhs) as u8)),
            fit::Value::UInt16z(val) => Ok(fit::Value::UInt16z((val as f64 / rhs) as u16)),
            fit::Value::UInt32z(val) => Ok(fit::Value::UInt32z((val as f64 / rhs) as u32)),
            fit::Value::Byte(val) => Ok(fit::Value::Byte((val as f64 / rhs) as u8)),
            fit::Value::SInt64(val) => Ok(fit::Value::SInt64((val as f64 / rhs) as i64)),
            fit::Value::UInt64(val) => Ok(fit::Value::UInt64((val as f64 / rhs) as u64)),
            fit::Value::UInt64z(val) => Ok(fit::Value::UInt64z((val as f64 / rhs) as u64)),
            _ => Err("Unsupported operation: Value variant cannot be divided with f64"),
        }
    }
}

fn transform_value<R: ToString>(
    value: &fit::Value,
    args: TransformValueArgs<R>,
) -> Result<fit::Value, String> {
    if matches!(
        args.msg_ty,
        types::MesgNum::DeveloperDataId | types::MesgNum::FieldDescription
    ) {
        return Ok(value.clone());
    }
    if let fit::Value::Array(arr) = value {
        if let Some(len) = args.array {
            if len != 0 && len != arr.len() {
                return Err(format!(
"expected an array length of '{expected}', but got an array length of '{actual}'",
expected = len,
actual= arr.len()
));
            }
        } else {
            return Err(format!(
                "Expected field type to be array, but got type '{}'",
                value
            ));
        }
    }
    if args.field_ty == "string" {
        Ok(value.clone())
    } else if args.field_ty == "date_time" {
        return if let fit::Value::UInt32(timestamp) = value {
            // The second offset between UNIX and FIT Epochs (631065600).
            Ok(fit::Value::DateTime(
                Utc.timestamp_opt(*timestamp as i64 + 631065600, 0).unwrap(),
            ))
        } else {
            Err(format!(
                "Expected field type to be '{}' but got type '{}'",
                types::DateTime::base_type(),
                value
            ))
        };
    } else if args.is_base_type
        && fit::BaseType::try_from(args.field_ty)
            .ok()
            .filter(|ty| ty.is_numeric())
            .is_some()
    {
        return if let fit::Value::Array(arr) = value {
            Ok(fit::Value::Array(
                arr.iter()
                    .map(|it| {
                        it.to_owned()
                            .div(args.scale)
                            .and_then(|it| it.sub(args.offset))
                            .unwrap()
                    })
                    .collect::<Vec<_>>(),
            ))
        } else {
            Ok(value
                .to_owned()
                .div(args.scale)
                .and_then(|it| it.sub(args.offset))
                .unwrap())
        };
    } else {
        let ty_convert = |value: &fit::Value| {
            args.ty_to_str.deref()(value)
                .map(|it| fit::Value::String(it.to_string()))
                .unwrap_or(value.clone())
        };
        return if let fit::Value::Array(arr) = value {
            Ok(fit::Value::Array(
                arr.iter().map(ty_convert).collect::<Vec<_>>(),
            ))
        } else {
            Ok(ty_convert(value))
        };
    }
}

type MessageDecoder = Box<
    dyn Fn(
        &mut HashMap<&'static str, Field>,
        &mut crate::accumulator::Accumulator,
        MessageDecodeArgs,
    ) -> Result<(), String>,
>;
/// Must be first message in file.
fn _file_id(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::File::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "product",
                Field {
                    name: "product",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(263)) {
                message_map.insert(
                    "favero_product",
                    Field {
                        name: "favero_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "favero_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::FaveroProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(1)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(15)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(13)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(89)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        3 => {
            message_map.insert(
                "serial_number",
                Field {
                    name: "serial_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "time_created",
                Field {
                    name: "time_created",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "number",
                Field {
                    name: "number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "product_name",
                Field {
                    name: "product_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _file_creator(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "software_version",
                Field {
                    name: "software_version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "hardware_version",
                Field {
                    name: "hardware_version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _timestamp_correlation(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "fractional_timestamp",
                Field {
                    name: "fractional_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 32768.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "system_timestamp",
                Field {
                    name: "system_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "fractional_system_timestamp",
                Field {
                    name: "fractional_system_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 32768.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "local_timestamp",
                Field {
                    name: "local_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "local_date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocalDateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "system_timestamp_ms",
                Field {
                    name: "system_timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _software(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "version",
                Field {
                    name: "version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "part_number",
                Field {
                    name: "part_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _slave_device(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "product",
                Field {
                    name: "product",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(263)) {
                message_map.insert(
                    "favero_product",
                    Field {
                        name: "favero_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "favero_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::FaveroProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(1)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(15)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(13)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(89)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _capabilities(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "languages",
                Field {
                    name: "languages",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sports",
                Field {
                    name: "sports",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport_bits_0",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::SportBits0::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "workouts_supported",
                Field {
                    name: "workouts_supported",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "workout_capabilities",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::WorkoutCapabilities::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "connectivity_supported",
                Field {
                    name: "connectivity_supported",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "connectivity_capabilities",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::ConnectivityCapabilities::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _file_capabilities(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::File::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "flags",
                Field {
                    name: "flags",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file_flags",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::FileFlags::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "directory",
                Field {
                    name: "directory",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "max_count",
                Field {
                    name: "max_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "max_size",
                Field {
                    name: "max_size",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bytes",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _mesg_capabilities(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "file",
                Field {
                    name: "file",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::File::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "mesg_num",
                Field {
                    name: "mesg_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "count_type",
                Field {
                    name: "count_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_count",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgCount::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "count",
                Field {
                    name: "count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&2u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "num_per_file",
                    Field {
                        name: "num_per_file",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "max_per_file",
                    Field {
                        name: "max_per_file",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "max_per_file_type",
                    Field {
                        name: "max_per_file_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _field_capabilities(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "file",
                Field {
                    name: "file",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::File::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "mesg_num",
                Field {
                    name: "mesg_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "field_num",
                Field {
                    name: "field_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "count",
                Field {
                    name: "count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _device_settings(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "active_time_zone",
                Field {
                    name: "active_time_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "utc_offset",
                Field {
                    name: "utc_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "time_offset",
                Field {
                    name: "time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "time_mode",
                Field {
                    name: "time_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "time_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::TimeMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "time_zone_offset",
                Field {
                    name: "time_zone_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 4.0,
                            offset: 0.0,
                            units: "hr",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "backlight_mode",
                Field {
                    name: "backlight_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "backlight_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BacklightMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        36 => {
            message_map.insert(
                "activity_tracker_enabled",
                Field {
                    name: "activity_tracker_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "clock_time",
                Field {
                    name: "clock_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        40 => {
            message_map.insert(
                "pages_enabled",
                Field {
                    name: "pages_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        46 => {
            message_map.insert(
                "move_alert_enabled",
                Field {
                    name: "move_alert_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "date_mode",
                Field {
                    name: "date_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        55 => {
            message_map.insert(
                "display_orientation",
                Field {
                    name: "display_orientation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_orientation",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::DisplayOrientation::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        56 => {
            message_map.insert(
                "mounting_side",
                Field {
                    name: "mounting_side",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "side",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Side::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        57 => {
            message_map.insert(
                "default_page",
                Field {
                    name: "default_page",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        58 => {
            message_map.insert(
                "autosync_min_steps",
                Field {
                    name: "autosync_min_steps",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "steps",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        59 => {
            message_map.insert(
                "autosync_min_time",
                Field {
                    name: "autosync_min_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "minutes",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        80 => {
            message_map.insert(
                "lactate_threshold_autodetect_enabled",
                Field {
                    name: "lactate_threshold_autodetect_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        86 => {
            message_map.insert(
                "ble_auto_upload_enabled",
                Field {
                    name: "ble_auto_upload_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        89 => {
            message_map.insert(
                "auto_sync_frequency",
                Field {
                    name: "auto_sync_frequency",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "auto_sync_frequency",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::AutoSyncFrequency::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        90 => {
            message_map.insert(
                "auto_activity_detect",
                Field {
                    name: "auto_activity_detect",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "auto_activity_detect",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::AutoActivityDetect::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        94 => {
            message_map.insert(
                "number_of_screens",
                Field {
                    name: "number_of_screens",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        95 => {
            message_map.insert(
                "smart_notification_display_orientation",
                Field {
                    name: "smart_notification_display_orientation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_orientation",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::DisplayOrientation::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        134 => {
            message_map.insert(
                "tap_interface",
                Field {
                    name: "tap_interface",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "switch",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Switch::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        174 => {
            message_map.insert(
                "tap_sensitivity",
                Field {
                    name: "tap_sensitivity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "tap_sensitivity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::TapSensitivity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _user_profile(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "friendly_name",
                Field {
                    name: "friendly_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "gender",
                Field {
                    name: "gender",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "gender",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Gender::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "age",
                Field {
                    name: "age",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "years",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "height",
                Field {
                    name: "height",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "weight",
                Field {
                    name: "weight",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "language",
                Field {
                    name: "language",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "language",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Language::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "elev_setting",
                Field {
                    name: "elev_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "weight_setting",
                Field {
                    name: "weight_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "resting_heart_rate",
                Field {
                    name: "resting_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "default_max_running_heart_rate",
                Field {
                    name: "default_max_running_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "default_max_biking_heart_rate",
                Field {
                    name: "default_max_biking_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "default_max_heart_rate",
                Field {
                    name: "default_max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "hr_setting",
                Field {
                    name: "hr_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_heart",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayHeart::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "speed_setting",
                Field {
                    name: "speed_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "dist_setting",
                Field {
                    name: "dist_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "power_setting",
                Field {
                    name: "power_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_power",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayPower::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "activity_class",
                Field {
                    name: "activity_class",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_class",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivityClass::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "position_setting",
                Field {
                    name: "position_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_position",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayPosition::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "temperature_setting",
                Field {
                    name: "temperature_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "local_id",
                Field {
                    name: "local_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "user_local_id",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::UserLocalId::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "global_id",
                Field {
                    name: "global_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(6),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        28 => {
            message_map.insert(
                "wake_time",
                Field {
                    name: "wake_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "localtime_into_day",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocaltimeIntoDay::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "sleep_time",
                Field {
                    name: "sleep_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "localtime_into_day",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocaltimeIntoDay::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "height_setting",
                Field {
                    name: "height_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        31 => {
            message_map.insert(
                "user_running_step_length",
                Field {
                    name: "user_running_step_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "user_walking_step_length",
                Field {
                    name: "user_walking_step_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "depth_setting",
                Field {
                    name: "depth_setting",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        49 => {
            message_map.insert(
                "dive_count",
                Field {
                    name: "dive_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _hrm_profile(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "hrm_ant_id",
                Field {
                    name: "hrm_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "log_hrv",
                Field {
                    name: "log_hrv",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "hrm_ant_id_trans_type",
                Field {
                    name: "hrm_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _sdm_profile(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sdm_ant_id",
                Field {
                    name: "sdm_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "sdm_cal_factor",
                Field {
                    name: "sdm_cal_factor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "odometer",
                Field {
                    name: "odometer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "speed_source",
                Field {
                    name: "speed_source",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "sdm_ant_id_trans_type",
                Field {
                    name: "sdm_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "odometer_rollover",
                Field {
                    name: "odometer_rollover",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _bike_profile(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "odometer",
                Field {
                    name: "odometer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "bike_spd_ant_id",
                Field {
                    name: "bike_spd_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "bike_cad_ant_id",
                Field {
                    name: "bike_cad_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "bike_spdcad_ant_id",
                Field {
                    name: "bike_spdcad_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "bike_power_ant_id",
                Field {
                    name: "bike_power_ant_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "custom_wheelsize",
                Field {
                    name: "custom_wheelsize",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "auto_wheelsize",
                Field {
                    name: "auto_wheelsize",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "bike_weight",
                Field {
                    name: "bike_weight",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "power_cal_factor",
                Field {
                    name: "power_cal_factor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "auto_wheel_cal",
                Field {
                    name: "auto_wheel_cal",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "auto_power_zero",
                Field {
                    name: "auto_power_zero",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "id",
                Field {
                    name: "id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "spd_enabled",
                Field {
                    name: "spd_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "cad_enabled",
                Field {
                    name: "cad_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "spdcad_enabled",
                Field {
                    name: "spdcad_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "power_enabled",
                Field {
                    name: "power_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "crank_length",
                Field {
                    name: "crank_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "bike_spd_ant_id_trans_type",
                Field {
                    name: "bike_spd_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "bike_cad_ant_id_trans_type",
                Field {
                    name: "bike_cad_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "bike_spdcad_ant_id_trans_type",
                Field {
                    name: "bike_spdcad_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "bike_power_ant_id_trans_type",
                Field {
                    name: "bike_power_ant_id_trans_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        37 => {
            message_map.insert(
                "odometer_rollover",
                Field {
                    name: "odometer_rollover",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        38 => {
            message_map.insert(
                "front_gear_num",
                Field {
                    name: "front_gear_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "front_gear",
                Field {
                    name: "front_gear",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        40 => {
            message_map.insert(
                "rear_gear_num",
                Field {
                    name: "rear_gear_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        41 => {
            message_map.insert(
                "rear_gear",
                Field {
                    name: "rear_gear",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        44 => {
            message_map.insert(
                "shimano_di2_enabled",
                Field {
                    name: "shimano_di2_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _connectivity(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "bluetooth_enabled",
                Field {
                    name: "bluetooth_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "bluetooth_le_enabled",
                Field {
                    name: "bluetooth_le_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "ant_enabled",
                Field {
                    name: "ant_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "live_tracking_enabled",
                Field {
                    name: "live_tracking_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "weather_conditions_enabled",
                Field {
                    name: "weather_conditions_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "weather_alerts_enabled",
                Field {
                    name: "weather_alerts_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "auto_activity_upload_enabled",
                Field {
                    name: "auto_activity_upload_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "course_download_enabled",
                Field {
                    name: "course_download_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "workout_download_enabled",
                Field {
                    name: "workout_download_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "gps_ephemeris_download_enabled",
                Field {
                    name: "gps_ephemeris_download_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "incident_detection_enabled",
                Field {
                    name: "incident_detection_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "grouptrack_enabled",
                Field {
                    name: "grouptrack_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _watchface_settings(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "mode",
                Field {
                    name: "mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "watchface_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WatchfaceMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "layout",
                Field {
                    name: "layout",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "digital_layout",
                    Field {
                        name: "digital_layout",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "digital_watchface_layout",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::DigitalWatchfaceLayout::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "analog_layout",
                    Field {
                        name: "analog_layout",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "analog_watchface_layout",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::AnalogWatchfaceLayout::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _ohr_settings(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "switch",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Switch::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _time_in_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "reference_mesg",
                Field {
                    name: "reference_mesg",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "reference_index",
                Field {
                    name: "reference_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "time_in_hr_zone",
                Field {
                    name: "time_in_hr_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "time_in_speed_zone",
                Field {
                    name: "time_in_speed_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "time_in_cadence_zone",
                Field {
                    name: "time_in_cadence_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "time_in_power_zone",
                Field {
                    name: "time_in_power_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "hr_zone_high_boundary",
                Field {
                    name: "hr_zone_high_boundary",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "speed_zone_high_boundary",
                Field {
                    name: "speed_zone_high_boundary",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "cadence_zone_high_bondary",
                Field {
                    name: "cadence_zone_high_bondary",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "power_zone_high_boundary",
                Field {
                    name: "power_zone_high_boundary",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "hr_calc_type",
                Field {
                    name: "hr_calc_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "hr_zone_calc",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::HrZoneCalc::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "max_heart_rate",
                Field {
                    name: "max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "resting_heart_rate",
                Field {
                    name: "resting_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "threshold_heart_rate",
                Field {
                    name: "threshold_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "pwr_calc_type",
                Field {
                    name: "pwr_calc_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "pwr_zone_calc",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::PwrZoneCalc::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "functional_threshold_power",
                Field {
                    name: "functional_threshold_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _zones_target(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        1 => {
            message_map.insert(
                "max_heart_rate",
                Field {
                    name: "max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "threshold_heart_rate",
                Field {
                    name: "threshold_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "functional_threshold_power",
                Field {
                    name: "functional_threshold_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "hr_calc_type",
                Field {
                    name: "hr_calc_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "hr_zone_calc",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::HrZoneCalc::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "pwr_calc_type",
                Field {
                    name: "pwr_calc_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "pwr_zone_calc",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::PwrZoneCalc::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _sport(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _hr_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "high_bpm",
                Field {
                    name: "high_bpm",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _speed_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "high_value",
                Field {
                    name: "high_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _cadence_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "high_value",
                Field {
                    name: "high_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _power_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "high_value",
                Field {
                    name: "high_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _met_zone(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "high_bpm",
                Field {
                    name: "high_bpm",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "calories",
                Field {
                    name: "calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "kcal / min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "fat_calories",
                Field {
                    name: "fat_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "kcal / min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _dive_settings(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "model",
                Field {
                    name: "model",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "tissue_model_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::TissueModelType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "gf_low",
                Field {
                    name: "gf_low",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "gf_high",
                Field {
                    name: "gf_high",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "water_type",
                Field {
                    name: "water_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "water_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WaterType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "water_density",
                Field {
                    name: "water_density",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kg/m^3",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "po2_warn",
                Field {
                    name: "po2_warn",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "po2_critical",
                Field {
                    name: "po2_critical",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "po2_deco",
                Field {
                    name: "po2_deco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "safety_stop_enabled",
                Field {
                    name: "safety_stop_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "bottom_depth",
                Field {
                    name: "bottom_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "bottom_time",
                Field {
                    name: "bottom_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "apnea_countdown_enabled",
                Field {
                    name: "apnea_countdown_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "apnea_countdown_time",
                Field {
                    name: "apnea_countdown_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "backlight_mode",
                Field {
                    name: "backlight_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "dive_backlight_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DiveBacklightMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "backlight_brightness",
                Field {
                    name: "backlight_brightness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "backlight_timeout",
                Field {
                    name: "backlight_timeout",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "backlight_timeout",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BacklightTimeout::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "repeat_dive_interval",
                Field {
                    name: "repeat_dive_interval",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "safety_stop_time",
                Field {
                    name: "safety_stop_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "heart_rate_source_type",
                Field {
                    name: "heart_rate_source_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "source_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SourceType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "heart_rate_source",
                Field {
                    name: "heart_rate_source",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "heart_rate_antplus_device_type",
                    Field {
                        name: "heart_rate_antplus_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "antplus_device_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::AntplusDeviceType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(5)) {
                message_map.insert(
                    "heart_rate_local_device_type",
                    Field {
                        name: "heart_rate_local_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "local_device_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::LocalDeviceType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        21 => {
            message_map.insert(
                "travel_gas",
                Field {
                    name: "travel_gas",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "ccr_low_setpoint_switch_mode",
                Field {
                    name: "ccr_low_setpoint_switch_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "ccr_setpoint_switch_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::CcrSetpointSwitchMode::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "ccr_low_setpoint",
                Field {
                    name: "ccr_low_setpoint",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "ccr_low_setpoint_depth",
                Field {
                    name: "ccr_low_setpoint_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "ccr_high_setpoint_switch_mode",
                Field {
                    name: "ccr_high_setpoint_switch_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "ccr_setpoint_switch_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::CcrSetpointSwitchMode::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        26 => {
            message_map.insert(
                "ccr_high_setpoint",
                Field {
                    name: "ccr_high_setpoint",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        27 => {
            message_map.insert(
                "ccr_high_setpoint_depth",
                Field {
                    name: "ccr_high_setpoint_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "gas_consumption_display",
                Field {
                    name: "gas_consumption_display",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "gas_consumption_rate_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::GasConsumptionRateType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "up_key_enabled",
                Field {
                    name: "up_key_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        35 => {
            message_map.insert(
                "dive_sounds",
                Field {
                    name: "dive_sounds",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "tone",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Tone::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        36 => {
            message_map.insert(
                "last_stop_multiple",
                Field {
                    name: "last_stop_multiple",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        37 => {
            message_map.insert(
                "no_fly_time_mode",
                Field {
                    name: "no_fly_time_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "no_fly_time_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::NoFlyTimeMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _dive_alarm(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "depth",
                Field {
                    name: "depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "time",
                Field {
                    name: "time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "alarm_type",
                Field {
                    name: "alarm_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "dive_alarm_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DiveAlarmType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "sound",
                Field {
                    name: "sound",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "tone",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Tone::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "dive_types",
                Field {
                    name: "dive_types",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "id",
                Field {
                    name: "id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "popup_enabled",
                Field {
                    name: "popup_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "trigger_on_descent",
                Field {
                    name: "trigger_on_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "trigger_on_ascent",
                Field {
                    name: "trigger_on_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "repeating",
                Field {
                    name: "repeating",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "speed",
                Field {
                    name: "speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "mps",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _dive_apnea_alarm(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "depth",
                Field {
                    name: "depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "time",
                Field {
                    name: "time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "alarm_type",
                Field {
                    name: "alarm_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "dive_alarm_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DiveAlarmType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "sound",
                Field {
                    name: "sound",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "tone",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Tone::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "dive_types",
                Field {
                    name: "dive_types",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "id",
                Field {
                    name: "id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "popup_enabled",
                Field {
                    name: "popup_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "trigger_on_descent",
                Field {
                    name: "trigger_on_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "trigger_on_ascent",
                Field {
                    name: "trigger_on_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "repeating",
                Field {
                    name: "repeating",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "speed",
                Field {
                    name: "speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "mps",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _dive_gas(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "helium_content",
                Field {
                    name: "helium_content",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "oxygen_content",
                Field {
                    name: "oxygen_content",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "status",
                Field {
                    name: "status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "dive_gas_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DiveGasStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "mode",
                Field {
                    name: "mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "dive_gas_mode",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DiveGasMode::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _goal(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_date",
                Field {
                    name: "start_date",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "end_date",
                Field {
                    name: "end_date",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "goal",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Goal::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "value",
                Field {
                    name: "value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "repeat",
                Field {
                    name: "repeat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "target_value",
                Field {
                    name: "target_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "recurrence",
                Field {
                    name: "recurrence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "goal_recurrence",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::GoalRecurrence::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "recurrence_value",
                Field {
                    name: "recurrence_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "source",
                Field {
                    name: "source",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "goal_source",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::GoalSource::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _activity(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "num_sessions",
                Field {
                    name: "num_sessions",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Activity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "local_timestamp",
                Field {
                    name: "local_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "local_date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocalDateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _session(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "start_position_lat",
                Field {
                    name: "start_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "start_position_long",
                Field {
                    name: "start_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "total_elapsed_time",
                Field {
                    name: "total_elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "total_distance",
                Field {
                    name: "total_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "total_cycles",
                Field {
                    name: "total_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "total_strides",
                    Field {
                        name: "total_strides",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "total_strides",
                    Field {
                        name: "total_strides",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(5)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(15)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(37)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        11 => {
            message_map.insert(
                "total_calories",
                Field {
                    name: "total_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "total_fat_calories",
                Field {
                    name: "total_fat_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "avg_speed",
                Field {
                    name: "avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_avg_speed",
                Field {
                    name: "enhanced_avg_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "max_speed",
                Field {
                    name: "max_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_max_speed",
                Field {
                    name: "enhanced_max_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "avg_heart_rate",
                Field {
                    name: "avg_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "max_heart_rate",
                Field {
                    name: "max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "avg_cadence",
                Field {
                    name: "avg_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "avg_running_cadence",
                    Field {
                        name: "avg_running_cadence",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides/min",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        19 => {
            message_map.insert(
                "max_cadence",
                Field {
                    name: "max_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "max_running_cadence",
                    Field {
                        name: "max_running_cadence",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides/min",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        20 => {
            message_map.insert(
                "avg_power",
                Field {
                    name: "avg_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "max_power",
                Field {
                    name: "max_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "total_ascent",
                Field {
                    name: "total_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "total_descent",
                Field {
                    name: "total_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "total_training_effect",
                Field {
                    name: "total_training_effect",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "first_lap_index",
                Field {
                    name: "first_lap_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        26 => {
            message_map.insert(
                "num_laps",
                Field {
                    name: "num_laps",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        27 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        28 => {
            message_map.insert(
                "trigger",
                Field {
                    name: "trigger",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "session_trigger",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SessionTrigger::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "nec_lat",
                Field {
                    name: "nec_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "nec_long",
                Field {
                    name: "nec_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        31 => {
            message_map.insert(
                "swc_lat",
                Field {
                    name: "swc_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "swc_long",
                Field {
                    name: "swc_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        33 => {
            message_map.insert(
                "num_lengths",
                Field {
                    name: "num_lengths",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "lengths",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        34 => {
            message_map.insert(
                "normalized_power",
                Field {
                    name: "normalized_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        35 => {
            message_map.insert(
                "training_stress_score",
                Field {
                    name: "training_stress_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "tss",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        36 => {
            message_map.insert(
                "intensity_factor",
                Field {
                    name: "intensity_factor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "if",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        37 => {
            message_map.insert(
                "left_right_balance",
                Field {
                    name: "left_right_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "left_right_balance_100",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::LeftRightBalance100::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        38 => {
            message_map.insert(
                "end_position_lat",
                Field {
                    name: "end_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "end_position_long",
                Field {
                    name: "end_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        41 => {
            message_map.insert(
                "avg_stroke_count",
                Field {
                    name: "avg_stroke_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "strokes/lap",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        42 => {
            message_map.insert(
                "avg_stroke_distance",
                Field {
                    name: "avg_stroke_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        43 => {
            message_map.insert(
                "swim_stroke",
                Field {
                    name: "swim_stroke",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "swim_stroke",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "swim_stroke",
                            array: None,
                            ty_to_str: Box::new(|val| types::SwimStroke::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        44 => {
            message_map.insert(
                "pool_length",
                Field {
                    name: "pool_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        45 => {
            message_map.insert(
                "threshold_power",
                Field {
                    name: "threshold_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        46 => {
            message_map.insert(
                "pool_length_unit",
                Field {
                    name: "pool_length_unit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "num_active_lengths",
                Field {
                    name: "num_active_lengths",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "lengths",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        48 => {
            message_map.insert(
                "total_work",
                Field {
                    name: "total_work",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "J",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        49 => {
            message_map.insert(
                "avg_altitude",
                Field {
                    name: "avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        50 => {
            message_map.insert(
                "max_altitude",
                Field {
                    name: "max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        51 => {
            message_map.insert(
                "gps_accuracy",
                Field {
                    name: "gps_accuracy",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        52 => {
            message_map.insert(
                "avg_grade",
                Field {
                    name: "avg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        53 => {
            message_map.insert(
                "avg_pos_grade",
                Field {
                    name: "avg_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        54 => {
            message_map.insert(
                "avg_neg_grade",
                Field {
                    name: "avg_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        55 => {
            message_map.insert(
                "max_pos_grade",
                Field {
                    name: "max_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        56 => {
            message_map.insert(
                "max_neg_grade",
                Field {
                    name: "max_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        57 => {
            message_map.insert(
                "avg_temperature",
                Field {
                    name: "avg_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        58 => {
            message_map.insert(
                "max_temperature",
                Field {
                    name: "max_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        59 => {
            message_map.insert(
                "total_moving_time",
                Field {
                    name: "total_moving_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        60 => {
            message_map.insert(
                "avg_pos_vertical_speed",
                Field {
                    name: "avg_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        61 => {
            message_map.insert(
                "avg_neg_vertical_speed",
                Field {
                    name: "avg_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        62 => {
            message_map.insert(
                "max_pos_vertical_speed",
                Field {
                    name: "max_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        63 => {
            message_map.insert(
                "max_neg_vertical_speed",
                Field {
                    name: "max_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        64 => {
            message_map.insert(
                "min_heart_rate",
                Field {
                    name: "min_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        65 => {
            message_map.insert(
                "time_in_hr_zone",
                Field {
                    name: "time_in_hr_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        66 => {
            message_map.insert(
                "time_in_speed_zone",
                Field {
                    name: "time_in_speed_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        67 => {
            message_map.insert(
                "time_in_cadence_zone",
                Field {
                    name: "time_in_cadence_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        68 => {
            message_map.insert(
                "time_in_power_zone",
                Field {
                    name: "time_in_power_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        69 => {
            message_map.insert(
                "avg_lap_time",
                Field {
                    name: "avg_lap_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        70 => {
            message_map.insert(
                "best_lap_index",
                Field {
                    name: "best_lap_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        71 => {
            message_map.insert(
                "min_altitude",
                Field {
                    name: "min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        82 => {
            message_map.insert(
                "player_score",
                Field {
                    name: "player_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        83 => {
            message_map.insert(
                "opponent_score",
                Field {
                    name: "opponent_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        84 => {
            message_map.insert(
                "opponent_name",
                Field {
                    name: "opponent_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        85 => {
            message_map.insert(
                "stroke_count",
                Field {
                    name: "stroke_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        86 => {
            message_map.insert(
                "zone_count",
                Field {
                    name: "zone_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        87 => {
            message_map.insert(
                "max_ball_speed",
                Field {
                    name: "max_ball_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        88 => {
            message_map.insert(
                "avg_ball_speed",
                Field {
                    name: "avg_ball_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        89 => {
            message_map.insert(
                "avg_vertical_oscillation",
                Field {
                    name: "avg_vertical_oscillation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        90 => {
            message_map.insert(
                "avg_stance_time_percent",
                Field {
                    name: "avg_stance_time_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        91 => {
            message_map.insert(
                "avg_stance_time",
                Field {
                    name: "avg_stance_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        92 => {
            message_map.insert(
                "avg_fractional_cadence",
                Field {
                    name: "avg_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        93 => {
            message_map.insert(
                "max_fractional_cadence",
                Field {
                    name: "max_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        94 => {
            message_map.insert(
                "total_fractional_cycles",
                Field {
                    name: "total_fractional_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        95 => {
            message_map.insert(
                "avg_total_hemoglobin_conc",
                Field {
                    name: "avg_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        96 => {
            message_map.insert(
                "min_total_hemoglobin_conc",
                Field {
                    name: "min_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        97 => {
            message_map.insert(
                "max_total_hemoglobin_conc",
                Field {
                    name: "max_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        98 => {
            message_map.insert(
                "avg_saturated_hemoglobin_percent",
                Field {
                    name: "avg_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        99 => {
            message_map.insert(
                "min_saturated_hemoglobin_percent",
                Field {
                    name: "min_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        100 => {
            message_map.insert(
                "max_saturated_hemoglobin_percent",
                Field {
                    name: "max_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        101 => {
            message_map.insert(
                "avg_left_torque_effectiveness",
                Field {
                    name: "avg_left_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        102 => {
            message_map.insert(
                "avg_right_torque_effectiveness",
                Field {
                    name: "avg_right_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        103 => {
            message_map.insert(
                "avg_left_pedal_smoothness",
                Field {
                    name: "avg_left_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        104 => {
            message_map.insert(
                "avg_right_pedal_smoothness",
                Field {
                    name: "avg_right_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        105 => {
            message_map.insert(
                "avg_combined_pedal_smoothness",
                Field {
                    name: "avg_combined_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        110 => {
            message_map.insert(
                "sport_profile_name",
                Field {
                    name: "sport_profile_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        111 => {
            message_map.insert(
                "sport_index",
                Field {
                    name: "sport_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        112 => {
            message_map.insert(
                "time_standing",
                Field {
                    name: "time_standing",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        113 => {
            message_map.insert(
                "stand_count",
                Field {
                    name: "stand_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        114 => {
            message_map.insert(
                "avg_left_pco",
                Field {
                    name: "avg_left_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        115 => {
            message_map.insert(
                "avg_right_pco",
                Field {
                    name: "avg_right_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        116 => {
            message_map.insert(
                "avg_left_power_phase",
                Field {
                    name: "avg_left_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        117 => {
            message_map.insert(
                "avg_left_power_phase_peak",
                Field {
                    name: "avg_left_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        118 => {
            message_map.insert(
                "avg_right_power_phase",
                Field {
                    name: "avg_right_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        119 => {
            message_map.insert(
                "avg_right_power_phase_peak",
                Field {
                    name: "avg_right_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        120 => {
            message_map.insert(
                "avg_power_position",
                Field {
                    name: "avg_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        121 => {
            message_map.insert(
                "max_power_position",
                Field {
                    name: "max_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        122 => {
            message_map.insert(
                "avg_cadence_position",
                Field {
                    name: "avg_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        123 => {
            message_map.insert(
                "max_cadence_position",
                Field {
                    name: "max_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        124 => {
            message_map.insert(
                "enhanced_avg_speed",
                Field {
                    name: "enhanced_avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        125 => {
            message_map.insert(
                "enhanced_max_speed",
                Field {
                    name: "enhanced_max_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        126 => {
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        127 => {
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        128 => {
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        129 => {
            message_map.insert(
                "avg_lev_motor_power",
                Field {
                    name: "avg_lev_motor_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        130 => {
            message_map.insert(
                "max_lev_motor_power",
                Field {
                    name: "max_lev_motor_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        131 => {
            message_map.insert(
                "lev_battery_consumption",
                Field {
                    name: "lev_battery_consumption",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        132 => {
            message_map.insert(
                "avg_vertical_ratio",
                Field {
                    name: "avg_vertical_ratio",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        133 => {
            message_map.insert(
                "avg_stance_time_balance",
                Field {
                    name: "avg_stance_time_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        134 => {
            message_map.insert(
                "avg_step_length",
                Field {
                    name: "avg_step_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        137 => {
            message_map.insert(
                "total_anaerobic_training_effect",
                Field {
                    name: "total_anaerobic_training_effect",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        139 => {
            message_map.insert(
                "avg_vam",
                Field {
                    name: "avg_vam",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        140 => {
            message_map.insert(
                "avg_depth",
                Field {
                    name: "avg_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        141 => {
            message_map.insert(
                "max_depth",
                Field {
                    name: "max_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        142 => {
            message_map.insert(
                "surface_interval",
                Field {
                    name: "surface_interval",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        143 => {
            message_map.insert(
                "start_cns",
                Field {
                    name: "start_cns",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        144 => {
            message_map.insert(
                "end_cns",
                Field {
                    name: "end_cns",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        145 => {
            message_map.insert(
                "start_n2",
                Field {
                    name: "start_n2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        146 => {
            message_map.insert(
                "end_n2",
                Field {
                    name: "end_n2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        147 => {
            message_map.insert(
                "avg_respiration_rate",
                Field {
                    name: "avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        148 => {
            message_map.insert(
                "max_respiration_rate",
                Field {
                    name: "max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        149 => {
            message_map.insert(
                "min_respiration_rate",
                Field {
                    name: "min_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_min_respiration_rate",
                Field {
                    name: "enhanced_min_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        150 => {
            message_map.insert(
                "min_temperature",
                Field {
                    name: "min_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        155 => {
            message_map.insert(
                "o2_toxicity",
                Field {
                    name: "o2_toxicity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "OTUs",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        156 => {
            message_map.insert(
                "dive_number",
                Field {
                    name: "dive_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        168 => {
            message_map.insert(
                "training_load_peak",
                Field {
                    name: "training_load_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 65536.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        169 => {
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        170 => {
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        180 => {
            message_map.insert(
                "enhanced_min_respiration_rate",
                Field {
                    name: "enhanced_min_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        181 => {
            message_map.insert(
                "total_grit",
                Field {
                    name: "total_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        182 => {
            message_map.insert(
                "total_flow",
                Field {
                    name: "total_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        183 => {
            message_map.insert(
                "jump_count",
                Field {
                    name: "jump_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        186 => {
            message_map.insert(
                "avg_grit",
                Field {
                    name: "avg_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        187 => {
            message_map.insert(
                "avg_flow",
                Field {
                    name: "avg_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        194 => {
            message_map.insert(
                "avg_spo2",
                Field {
                    name: "avg_spo2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        195 => {
            message_map.insert(
                "avg_stress",
                Field {
                    name: "avg_stress",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        197 => {
            message_map.insert(
                "sdrr_hrv",
                Field {
                    name: "sdrr_hrv",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mS",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        198 => {
            message_map.insert(
                "rmssd_hrv",
                Field {
                    name: "rmssd_hrv",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mS",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        199 => {
            message_map.insert(
                "total_fractional_ascent",
                Field {
                    name: "total_fractional_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        200 => {
            message_map.insert(
                "total_fractional_descent",
                Field {
                    name: "total_fractional_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        208 => {
            message_map.insert(
                "avg_core_temperature",
                Field {
                    name: "avg_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        209 => {
            message_map.insert(
                "min_core_temperature",
                Field {
                    name: "min_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        210 => {
            message_map.insert(
                "max_core_temperature",
                Field {
                    name: "max_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _lap(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "start_position_lat",
                Field {
                    name: "start_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "start_position_long",
                Field {
                    name: "start_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "end_position_lat",
                Field {
                    name: "end_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "end_position_long",
                Field {
                    name: "end_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "total_elapsed_time",
                Field {
                    name: "total_elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "total_distance",
                Field {
                    name: "total_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "total_cycles",
                Field {
                    name: "total_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "total_strides",
                    Field {
                        name: "total_strides",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "total_strides",
                    Field {
                        name: "total_strides",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(5)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(15)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(37)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        11 => {
            message_map.insert(
                "total_calories",
                Field {
                    name: "total_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "total_fat_calories",
                Field {
                    name: "total_fat_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "avg_speed",
                Field {
                    name: "avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_avg_speed",
                Field {
                    name: "enhanced_avg_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "max_speed",
                Field {
                    name: "max_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_max_speed",
                Field {
                    name: "enhanced_max_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "avg_heart_rate",
                Field {
                    name: "avg_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "max_heart_rate",
                Field {
                    name: "max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "avg_cadence",
                Field {
                    name: "avg_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "avg_running_cadence",
                    Field {
                        name: "avg_running_cadence",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides/min",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        18 => {
            message_map.insert(
                "max_cadence",
                Field {
                    name: "max_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "max_running_cadence",
                    Field {
                        name: "max_running_cadence",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strides/min",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        19 => {
            message_map.insert(
                "avg_power",
                Field {
                    name: "avg_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "max_power",
                Field {
                    name: "max_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "total_ascent",
                Field {
                    name: "total_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "total_descent",
                Field {
                    name: "total_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "intensity",
                Field {
                    name: "intensity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "intensity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Intensity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "lap_trigger",
                Field {
                    name: "lap_trigger",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "lap_trigger",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LapTrigger::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        26 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "num_lengths",
                Field {
                    name: "num_lengths",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "lengths",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        33 => {
            message_map.insert(
                "normalized_power",
                Field {
                    name: "normalized_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        34 => {
            message_map.insert(
                "left_right_balance",
                Field {
                    name: "left_right_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "left_right_balance_100",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::LeftRightBalance100::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        35 => {
            message_map.insert(
                "first_length_index",
                Field {
                    name: "first_length_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        37 => {
            message_map.insert(
                "avg_stroke_distance",
                Field {
                    name: "avg_stroke_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        38 => {
            message_map.insert(
                "swim_stroke",
                Field {
                    name: "swim_stroke",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "swim_stroke",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SwimStroke::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        40 => {
            message_map.insert(
                "num_active_lengths",
                Field {
                    name: "num_active_lengths",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "lengths",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        41 => {
            message_map.insert(
                "total_work",
                Field {
                    name: "total_work",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "J",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        42 => {
            message_map.insert(
                "avg_altitude",
                Field {
                    name: "avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        43 => {
            message_map.insert(
                "max_altitude",
                Field {
                    name: "max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        44 => {
            message_map.insert(
                "gps_accuracy",
                Field {
                    name: "gps_accuracy",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        45 => {
            message_map.insert(
                "avg_grade",
                Field {
                    name: "avg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        46 => {
            message_map.insert(
                "avg_pos_grade",
                Field {
                    name: "avg_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "avg_neg_grade",
                Field {
                    name: "avg_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        48 => {
            message_map.insert(
                "max_pos_grade",
                Field {
                    name: "max_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        49 => {
            message_map.insert(
                "max_neg_grade",
                Field {
                    name: "max_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        50 => {
            message_map.insert(
                "avg_temperature",
                Field {
                    name: "avg_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        51 => {
            message_map.insert(
                "max_temperature",
                Field {
                    name: "max_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        52 => {
            message_map.insert(
                "total_moving_time",
                Field {
                    name: "total_moving_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        53 => {
            message_map.insert(
                "avg_pos_vertical_speed",
                Field {
                    name: "avg_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        54 => {
            message_map.insert(
                "avg_neg_vertical_speed",
                Field {
                    name: "avg_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        55 => {
            message_map.insert(
                "max_pos_vertical_speed",
                Field {
                    name: "max_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        56 => {
            message_map.insert(
                "max_neg_vertical_speed",
                Field {
                    name: "max_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        57 => {
            message_map.insert(
                "time_in_hr_zone",
                Field {
                    name: "time_in_hr_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        58 => {
            message_map.insert(
                "time_in_speed_zone",
                Field {
                    name: "time_in_speed_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        59 => {
            message_map.insert(
                "time_in_cadence_zone",
                Field {
                    name: "time_in_cadence_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        60 => {
            message_map.insert(
                "time_in_power_zone",
                Field {
                    name: "time_in_power_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        61 => {
            message_map.insert(
                "repetition_num",
                Field {
                    name: "repetition_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        62 => {
            message_map.insert(
                "min_altitude",
                Field {
                    name: "min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        63 => {
            message_map.insert(
                "min_heart_rate",
                Field {
                    name: "min_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        71 => {
            message_map.insert(
                "wkt_step_index",
                Field {
                    name: "wkt_step_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        74 => {
            message_map.insert(
                "opponent_score",
                Field {
                    name: "opponent_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        75 => {
            message_map.insert(
                "stroke_count",
                Field {
                    name: "stroke_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        76 => {
            message_map.insert(
                "zone_count",
                Field {
                    name: "zone_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        77 => {
            message_map.insert(
                "avg_vertical_oscillation",
                Field {
                    name: "avg_vertical_oscillation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        78 => {
            message_map.insert(
                "avg_stance_time_percent",
                Field {
                    name: "avg_stance_time_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        79 => {
            message_map.insert(
                "avg_stance_time",
                Field {
                    name: "avg_stance_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        80 => {
            message_map.insert(
                "avg_fractional_cadence",
                Field {
                    name: "avg_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        81 => {
            message_map.insert(
                "max_fractional_cadence",
                Field {
                    name: "max_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        82 => {
            message_map.insert(
                "total_fractional_cycles",
                Field {
                    name: "total_fractional_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        83 => {
            message_map.insert(
                "player_score",
                Field {
                    name: "player_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        84 => {
            message_map.insert(
                "avg_total_hemoglobin_conc",
                Field {
                    name: "avg_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        85 => {
            message_map.insert(
                "min_total_hemoglobin_conc",
                Field {
                    name: "min_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        86 => {
            message_map.insert(
                "max_total_hemoglobin_conc",
                Field {
                    name: "max_total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        87 => {
            message_map.insert(
                "avg_saturated_hemoglobin_percent",
                Field {
                    name: "avg_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        88 => {
            message_map.insert(
                "min_saturated_hemoglobin_percent",
                Field {
                    name: "min_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        89 => {
            message_map.insert(
                "max_saturated_hemoglobin_percent",
                Field {
                    name: "max_saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        91 => {
            message_map.insert(
                "avg_left_torque_effectiveness",
                Field {
                    name: "avg_left_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        92 => {
            message_map.insert(
                "avg_right_torque_effectiveness",
                Field {
                    name: "avg_right_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        93 => {
            message_map.insert(
                "avg_left_pedal_smoothness",
                Field {
                    name: "avg_left_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        94 => {
            message_map.insert(
                "avg_right_pedal_smoothness",
                Field {
                    name: "avg_right_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        95 => {
            message_map.insert(
                "avg_combined_pedal_smoothness",
                Field {
                    name: "avg_combined_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        98 => {
            message_map.insert(
                "time_standing",
                Field {
                    name: "time_standing",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        99 => {
            message_map.insert(
                "stand_count",
                Field {
                    name: "stand_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        100 => {
            message_map.insert(
                "avg_left_pco",
                Field {
                    name: "avg_left_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        101 => {
            message_map.insert(
                "avg_right_pco",
                Field {
                    name: "avg_right_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        102 => {
            message_map.insert(
                "avg_left_power_phase",
                Field {
                    name: "avg_left_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        103 => {
            message_map.insert(
                "avg_left_power_phase_peak",
                Field {
                    name: "avg_left_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        104 => {
            message_map.insert(
                "avg_right_power_phase",
                Field {
                    name: "avg_right_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        105 => {
            message_map.insert(
                "avg_right_power_phase_peak",
                Field {
                    name: "avg_right_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        106 => {
            message_map.insert(
                "avg_power_position",
                Field {
                    name: "avg_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        107 => {
            message_map.insert(
                "max_power_position",
                Field {
                    name: "max_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        108 => {
            message_map.insert(
                "avg_cadence_position",
                Field {
                    name: "avg_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        109 => {
            message_map.insert(
                "max_cadence_position",
                Field {
                    name: "max_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        110 => {
            message_map.insert(
                "enhanced_avg_speed",
                Field {
                    name: "enhanced_avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        111 => {
            message_map.insert(
                "enhanced_max_speed",
                Field {
                    name: "enhanced_max_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        112 => {
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        113 => {
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        114 => {
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        115 => {
            message_map.insert(
                "avg_lev_motor_power",
                Field {
                    name: "avg_lev_motor_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        116 => {
            message_map.insert(
                "max_lev_motor_power",
                Field {
                    name: "max_lev_motor_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        117 => {
            message_map.insert(
                "lev_battery_consumption",
                Field {
                    name: "lev_battery_consumption",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        118 => {
            message_map.insert(
                "avg_vertical_ratio",
                Field {
                    name: "avg_vertical_ratio",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        119 => {
            message_map.insert(
                "avg_stance_time_balance",
                Field {
                    name: "avg_stance_time_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        120 => {
            message_map.insert(
                "avg_step_length",
                Field {
                    name: "avg_step_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        121 => {
            message_map.insert(
                "avg_vam",
                Field {
                    name: "avg_vam",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        122 => {
            message_map.insert(
                "avg_depth",
                Field {
                    name: "avg_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        123 => {
            message_map.insert(
                "max_depth",
                Field {
                    name: "max_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        124 => {
            message_map.insert(
                "min_temperature",
                Field {
                    name: "min_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        136 => {
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        137 => {
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        147 => {
            message_map.insert(
                "avg_respiration_rate",
                Field {
                    name: "avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        148 => {
            message_map.insert(
                "max_respiration_rate",
                Field {
                    name: "max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        149 => {
            message_map.insert(
                "total_grit",
                Field {
                    name: "total_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        150 => {
            message_map.insert(
                "total_flow",
                Field {
                    name: "total_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        151 => {
            message_map.insert(
                "jump_count",
                Field {
                    name: "jump_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        153 => {
            message_map.insert(
                "avg_grit",
                Field {
                    name: "avg_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        154 => {
            message_map.insert(
                "avg_flow",
                Field {
                    name: "avg_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        156 => {
            message_map.insert(
                "total_fractional_ascent",
                Field {
                    name: "total_fractional_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        157 => {
            message_map.insert(
                "total_fractional_descent",
                Field {
                    name: "total_fractional_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        158 => {
            message_map.insert(
                "avg_core_temperature",
                Field {
                    name: "avg_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        159 => {
            message_map.insert(
                "min_core_temperature",
                Field {
                    name: "min_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        160 => {
            message_map.insert(
                "max_core_temperature",
                Field {
                    name: "max_core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _length(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "total_elapsed_time",
                Field {
                    name: "total_elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "total_strokes",
                Field {
                    name: "total_strokes",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "strokes",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "avg_speed",
                Field {
                    name: "avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "swim_stroke",
                Field {
                    name: "swim_stroke",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "swim_stroke",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "swim_stroke",
                            array: None,
                            ty_to_str: Box::new(|val| types::SwimStroke::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "avg_swimming_cadence",
                Field {
                    name: "avg_swimming_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "strokes/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "total_calories",
                Field {
                    name: "total_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "length_type",
                Field {
                    name: "length_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "length_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LengthType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "player_score",
                Field {
                    name: "player_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "opponent_score",
                Field {
                    name: "opponent_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "stroke_count",
                Field {
                    name: "stroke_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "zone_count",
                Field {
                    name: "zone_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "avg_respiration_rate",
                Field {
                    name: "avg_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_avg_respiration_rate",
                Field {
                    name: "enhanced_avg_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "max_respiration_rate",
                Field {
                    name: "max_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_max_respiration_rate",
                Field {
                    name: "enhanced_max_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _record(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "altitude",
                Field {
                    name: "altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_altitude",
                Field {
                    name: "enhanced_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "heart_rate",
                Field {
                    name: "heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "cadence",
                Field {
                    name: "cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            accumulator.add(
                args.msg_no,
                args.field_no,
                args.value.try_as_usize().unwrap(),
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "speed",
                Field {
                    name: "speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_speed",
                Field {
                    name: "enhanced_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "power",
                Field {
                    name: "power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "compressed_speed_distance",
                Field {
                    name: "compressed_speed_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m/s,m",
                            array: Some(3),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "speed",
                Field {
                    name: "speed",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 16.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "grade",
                Field {
                    name: "grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "resistance",
                Field {
                    name: "resistance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "time_from_course",
                Field {
                    name: "time_from_course",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "cycle_length",
                Field {
                    name: "cycle_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "temperature",
                Field {
                    name: "temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "speed_1s",
                Field {
                    name: "speed_1s",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 16.0,
                            offset: 0.0,
                            units: "m/s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "cycles",
                Field {
                    name: "cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "total_cycles",
                Field {
                    name: "total_cycles",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "total_cycles",
                Field {
                    name: "total_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            accumulator.add(
                args.msg_no,
                args.field_no,
                args.value.try_as_usize().unwrap(),
            );
            Ok(())
        }
        28 => {
            message_map.insert(
                "compressed_accumulated_power",
                Field {
                    name: "compressed_accumulated_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "accumulated_power",
                Field {
                    name: "accumulated_power",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "accumulated_power",
                Field {
                    name: "accumulated_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            accumulator.add(
                args.msg_no,
                args.field_no,
                args.value.try_as_usize().unwrap(),
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "left_right_balance",
                Field {
                    name: "left_right_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "left_right_balance",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LeftRightBalance::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        31 => {
            message_map.insert(
                "gps_accuracy",
                Field {
                    name: "gps_accuracy",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "vertical_speed",
                Field {
                    name: "vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        33 => {
            message_map.insert(
                "calories",
                Field {
                    name: "calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "vertical_oscillation",
                Field {
                    name: "vertical_oscillation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        40 => {
            message_map.insert(
                "stance_time_percent",
                Field {
                    name: "stance_time_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        41 => {
            message_map.insert(
                "stance_time",
                Field {
                    name: "stance_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        42 => {
            message_map.insert(
                "activity_type",
                Field {
                    name: "activity_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivityType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        43 => {
            message_map.insert(
                "left_torque_effectiveness",
                Field {
                    name: "left_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        44 => {
            message_map.insert(
                "right_torque_effectiveness",
                Field {
                    name: "right_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        45 => {
            message_map.insert(
                "left_pedal_smoothness",
                Field {
                    name: "left_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        46 => {
            message_map.insert(
                "right_pedal_smoothness",
                Field {
                    name: "right_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "combined_pedal_smoothness",
                Field {
                    name: "combined_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        48 => {
            message_map.insert(
                "time128",
                Field {
                    name: "time128",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        49 => {
            message_map.insert(
                "stroke_type",
                Field {
                    name: "stroke_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "stroke_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::StrokeType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        50 => {
            message_map.insert(
                "zone",
                Field {
                    name: "zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        51 => {
            message_map.insert(
                "ball_speed",
                Field {
                    name: "ball_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        52 => {
            message_map.insert(
                "cadence256",
                Field {
                    name: "cadence256",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 256.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        53 => {
            message_map.insert(
                "fractional_cadence",
                Field {
                    name: "fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        54 => {
            message_map.insert(
                "total_hemoglobin_conc",
                Field {
                    name: "total_hemoglobin_conc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        55 => {
            message_map.insert(
                "total_hemoglobin_conc_min",
                Field {
                    name: "total_hemoglobin_conc_min",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        56 => {
            message_map.insert(
                "total_hemoglobin_conc_max",
                Field {
                    name: "total_hemoglobin_conc_max",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "g/dL",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        57 => {
            message_map.insert(
                "saturated_hemoglobin_percent",
                Field {
                    name: "saturated_hemoglobin_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        58 => {
            message_map.insert(
                "saturated_hemoglobin_percent_min",
                Field {
                    name: "saturated_hemoglobin_percent_min",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        59 => {
            message_map.insert(
                "saturated_hemoglobin_percent_max",
                Field {
                    name: "saturated_hemoglobin_percent_max",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        62 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        67 => {
            message_map.insert(
                "left_pco",
                Field {
                    name: "left_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        68 => {
            message_map.insert(
                "right_pco",
                Field {
                    name: "right_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        69 => {
            message_map.insert(
                "left_power_phase",
                Field {
                    name: "left_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        70 => {
            message_map.insert(
                "left_power_phase_peak",
                Field {
                    name: "left_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        71 => {
            message_map.insert(
                "right_power_phase",
                Field {
                    name: "right_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        72 => {
            message_map.insert(
                "right_power_phase_peak",
                Field {
                    name: "right_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        73 => {
            message_map.insert(
                "enhanced_speed",
                Field {
                    name: "enhanced_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        78 => {
            message_map.insert(
                "enhanced_altitude",
                Field {
                    name: "enhanced_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        81 => {
            message_map.insert(
                "battery_soc",
                Field {
                    name: "battery_soc",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        82 => {
            message_map.insert(
                "motor_power",
                Field {
                    name: "motor_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        83 => {
            message_map.insert(
                "vertical_ratio",
                Field {
                    name: "vertical_ratio",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        84 => {
            message_map.insert(
                "stance_time_balance",
                Field {
                    name: "stance_time_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        85 => {
            message_map.insert(
                "step_length",
                Field {
                    name: "step_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        87 => {
            message_map.insert(
                "cycle_length16",
                Field {
                    name: "cycle_length16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        91 => {
            message_map.insert(
                "absolute_pressure",
                Field {
                    name: "absolute_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Pa",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        92 => {
            message_map.insert(
                "depth",
                Field {
                    name: "depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        93 => {
            message_map.insert(
                "next_stop_depth",
                Field {
                    name: "next_stop_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        94 => {
            message_map.insert(
                "next_stop_time",
                Field {
                    name: "next_stop_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        95 => {
            message_map.insert(
                "time_to_surface",
                Field {
                    name: "time_to_surface",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        96 => {
            message_map.insert(
                "ndl_time",
                Field {
                    name: "ndl_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        97 => {
            message_map.insert(
                "cns_load",
                Field {
                    name: "cns_load",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        98 => {
            message_map.insert(
                "n2_load",
                Field {
                    name: "n2_load",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        99 => {
            message_map.insert(
                "respiration_rate",
                Field {
                    name: "respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "enhanced_respiration_rate",
                Field {
                    name: "enhanced_respiration_rate",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        108 => {
            message_map.insert(
                "enhanced_respiration_rate",
                Field {
                    name: "enhanced_respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "Breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        114 => {
            message_map.insert(
                "grit",
                Field {
                    name: "grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        115 => {
            message_map.insert(
                "flow",
                Field {
                    name: "flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        116 => {
            message_map.insert(
                "current_stress",
                Field {
                    name: "current_stress",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        117 => {
            message_map.insert(
                "ebike_travel_range",
                Field {
                    name: "ebike_travel_range",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "km",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        118 => {
            message_map.insert(
                "ebike_battery_level",
                Field {
                    name: "ebike_battery_level",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        119 => {
            message_map.insert(
                "ebike_assist_mode",
                Field {
                    name: "ebike_assist_mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "depends on sensor",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        120 => {
            message_map.insert(
                "ebike_assist_level_percent",
                Field {
                    name: "ebike_assist_level_percent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        123 => {
            message_map.insert(
                "air_time_remaining",
                Field {
                    name: "air_time_remaining",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        124 => {
            message_map.insert(
                "pressure_sac",
                Field {
                    name: "pressure_sac",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "bar/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        125 => {
            message_map.insert(
                "volume_sac",
                Field {
                    name: "volume_sac",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "L/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        126 => {
            message_map.insert(
                "rmv",
                Field {
                    name: "rmv",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "L/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        127 => {
            message_map.insert(
                "ascent_rate",
                Field {
                    name: "ascent_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        129 => {
            message_map.insert(
                "po2",
                Field {
                    name: "po2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        139 => {
            message_map.insert(
                "core_temperature",
                Field {
                    name: "core_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _event(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "data16",
                Field {
                    name: "data16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "timer_trigger",
                    Field {
                        name: "timer_trigger",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "timer_trigger",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::TimerTrigger::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(10)) {
                message_map.insert(
                    "course_point_index",
                    Field {
                        name: "course_point_index",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "message_index",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "battery_level",
                    Field {
                        name: "battery_level",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "V",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(12)) {
                message_map.insert(
                    "virtual_partner_speed",
                    Field {
                        name: "virtual_partner_speed",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(13)) {
                message_map.insert(
                    "hr_high_alert",
                    Field {
                        name: "hr_high_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "bpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(14)) {
                message_map.insert(
                    "hr_low_alert",
                    Field {
                        name: "hr_low_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "bpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(15)) {
                message_map.insert(
                    "speed_high_alert",
                    Field {
                        name: "speed_high_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(16)) {
                message_map.insert(
                    "speed_low_alert",
                    Field {
                        name: "speed_low_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(17)) {
                message_map.insert(
                    "cad_high_alert",
                    Field {
                        name: "cad_high_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(18)) {
                message_map.insert(
                    "cad_low_alert",
                    Field {
                        name: "cad_low_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(19)) {
                message_map.insert(
                    "power_high_alert",
                    Field {
                        name: "power_high_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "watts",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(20)) {
                message_map.insert(
                    "power_low_alert",
                    Field {
                        name: "power_low_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "watts",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(23)) {
                message_map.insert(
                    "time_duration_alert",
                    Field {
                        name: "time_duration_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(24)) {
                message_map.insert(
                    "distance_duration_alert",
                    Field {
                        name: "distance_duration_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 100.0,
                                offset: 0.0,
                                units: "m",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(25)) {
                message_map.insert(
                    "calorie_duration_alert",
                    Field {
                        name: "calorie_duration_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "calories",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(27)) {
                message_map.insert(
                    "fitness_equipment_state",
                    Field {
                        name: "fitness_equipment_state",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "fitness_equipment_state",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::FitnessEquipmentState::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(33)) {
                message_map.insert(
                    "sport_point",
                    Field {
                        name: "sport_point",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(42)) {
                message_map.insert(
                    "gear_change_data",
                    Field {
                        name: "gear_change_data",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(43)) {
                message_map.insert(
                    "gear_change_data",
                    Field {
                        name: "gear_change_data",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(44)) {
                message_map.insert(
                    "rider_position",
                    Field {
                        name: "rider_position",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "rider_position_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::RiderPositionType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(47)) {
                message_map.insert(
                    "comm_timeout",
                    Field {
                        name: "comm_timeout",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "comm_timeout_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::CommTimeoutType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(56)) {
                message_map.insert(
                    "dive_alert",
                    Field {
                        name: "dive_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "dive_alert",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::DiveAlert::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(54)) {
                message_map.insert(
                    "auto_activity_detect_duration",
                    Field {
                        name: "auto_activity_detect_duration",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint16",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "min",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(75)) {
                message_map.insert(
                    "radar_threat_alert",
                    Field {
                        name: "radar_threat_alert",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        4 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "score",
                Field {
                    name: "score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "opponent_score",
                Field {
                    name: "opponent_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "front_gear_num",
                Field {
                    name: "front_gear_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "front_gear",
                Field {
                    name: "front_gear",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "rear_gear_num",
                Field {
                    name: "rear_gear_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "rear_gear",
                Field {
                    name: "rear_gear",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "activity_type",
                Field {
                    name: "activity_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivityType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "start_timestamp",
                Field {
                    name: "start_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(54)) {
                message_map.insert(
                    "auto_activity_detect_start_timestamp",
                    Field {
                        name: "auto_activity_detect_start_timestamp",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "date_time",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "s",
                                array: None,
                                ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        21 => {
            message_map.insert(
                "radar_threat_level_max",
                Field {
                    name: "radar_threat_level_max",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "radar_threat_level_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::RadarThreatLevelType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "radar_threat_count",
                Field {
                    name: "radar_threat_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "radar_threat_avg_approach_speed",
                Field {
                    name: "radar_threat_avg_approach_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "radar_threat_max_approach_speed",
                Field {
                    name: "radar_threat_max_approach_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _device_info(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "device_type",
                Field {
                    name: "device_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "ble_device_type",
                    Field {
                        name: "ble_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "ble_device_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::BleDeviceType::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "antplus_device_type",
                    Field {
                        name: "antplus_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "antplus_device_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::AntplusDeviceType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "ant_device_type",
                    Field {
                        name: "ant_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint8",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&25u8) == Some(&fit::Value::Enum(5)) {
                message_map.insert(
                    "local_device_type",
                    Field {
                        name: "local_device_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "local_device_type",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| {
                                    types::LocalDeviceType::try_from(val).ok()
                                }),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        2 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "serial_number",
                Field {
                    name: "serial_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "product",
                Field {
                    name: "product",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&2u8) == Some(&fit::Value::UInt16(263)) {
                message_map.insert(
                    "favero_product",
                    Field {
                        name: "favero_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "favero_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::FaveroProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::UInt16(1)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::UInt16(15)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::UInt16(13)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&2u8) == Some(&fit::Value::UInt16(89)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        5 => {
            message_map.insert(
                "software_version",
                Field {
                    name: "software_version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "hardware_version",
                Field {
                    name: "hardware_version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "cum_operating_time",
                Field {
                    name: "cum_operating_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "battery_voltage",
                Field {
                    name: "battery_voltage",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 256.0,
                            offset: 0.0,
                            units: "V",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "battery_status",
                Field {
                    name: "battery_status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "battery_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BatteryStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "sensor_position",
                Field {
                    name: "sensor_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "body_location",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BodyLocation::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "descriptor",
                Field {
                    name: "descriptor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "ant_transmission_type",
                Field {
                    name: "ant_transmission_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "ant_device_number",
                Field {
                    name: "ant_device_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "ant_network",
                Field {
                    name: "ant_network",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "ant_network",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::AntNetwork::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "source_type",
                Field {
                    name: "source_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "source_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SourceType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        27 => {
            message_map.insert(
                "product_name",
                Field {
                    name: "product_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "battery_level",
                Field {
                    name: "battery_level",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _device_aux_battery_info(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "battery_voltage",
                Field {
                    name: "battery_voltage",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 256.0,
                            offset: 0.0,
                            units: "V",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "battery_status",
                Field {
                    name: "battery_status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "battery_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BatteryStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "battery_identifier",
                Field {
                    name: "battery_identifier",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Corresponds to file_id of workout or course.
fn _training_file(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "file",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::File::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "product",
                Field {
                    name: "product",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(263)) {
                message_map.insert(
                    "favero_product",
                    Field {
                        name: "favero_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "favero_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::FaveroProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(1)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(15)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(13)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::UInt16(89)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        3 => {
            message_map.insert(
                "serial_number",
                Field {
                    name: "serial_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "time_created",
                Field {
                    name: "time_created",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _weather_conditions(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "weather_report",
                Field {
                    name: "weather_report",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "weather_report",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WeatherReport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "temperature",
                Field {
                    name: "temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "condition",
                Field {
                    name: "condition",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "weather_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WeatherStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "wind_direction",
                Field {
                    name: "wind_direction",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "degrees",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "wind_speed",
                Field {
                    name: "wind_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "precipitation_probability",
                Field {
                    name: "precipitation_probability",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "temperature_feels_like",
                Field {
                    name: "temperature_feels_like",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "relative_humidity",
                Field {
                    name: "relative_humidity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "location",
                Field {
                    name: "location",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "observed_at_time",
                Field {
                    name: "observed_at_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "observed_location_lat",
                Field {
                    name: "observed_location_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "observed_location_long",
                Field {
                    name: "observed_location_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "day_of_week",
                Field {
                    name: "day_of_week",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "day_of_week",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DayOfWeek::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "high_temperature",
                Field {
                    name: "high_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "low_temperature",
                Field {
                    name: "low_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _weather_alert(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "report_id",
                Field {
                    name: "report_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "issue_time",
                Field {
                    name: "issue_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "expire_time",
                Field {
                    name: "expire_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "severity",
                Field {
                    name: "severity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "weather_severity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WeatherSeverity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "weather_severe_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WeatherSevereType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _gps_metadata(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "enhanced_altitude",
                Field {
                    name: "enhanced_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "enhanced_speed",
                Field {
                    name: "enhanced_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "heading",
                Field {
                    name: "heading",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "degrees",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "utc_timestamp",
                Field {
                    name: "utc_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "velocity",
                Field {
                    name: "velocity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s",
                            array: Some(3),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _camera_event(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "camera_event_type",
                Field {
                    name: "camera_event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "camera_event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::CameraEventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "camera_file_uuid",
                Field {
                    name: "camera_file_uuid",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "camera_orientation",
                Field {
                    name: "camera_orientation",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "camera_orientation_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::CameraOrientationType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _gyroscope_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sample_time_offset",
                Field {
                    name: "sample_time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "gyro_x",
                Field {
                    name: "gyro_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "gyro_y",
                Field {
                    name: "gyro_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "gyro_z",
                Field {
                    name: "gyro_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "calibrated_gyro_x",
                Field {
                    name: "calibrated_gyro_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "deg/s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "calibrated_gyro_y",
                Field {
                    name: "calibrated_gyro_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "deg/s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "calibrated_gyro_z",
                Field {
                    name: "calibrated_gyro_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "deg/s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _accelerometer_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sample_time_offset",
                Field {
                    name: "sample_time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "accel_x",
                Field {
                    name: "accel_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "accel_y",
                Field {
                    name: "accel_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "accel_z",
                Field {
                    name: "accel_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "calibrated_accel_x",
                Field {
                    name: "calibrated_accel_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "g",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "calibrated_accel_y",
                Field {
                    name: "calibrated_accel_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "g",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "calibrated_accel_z",
                Field {
                    name: "calibrated_accel_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "g",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "compressed_calibrated_accel_x",
                Field {
                    name: "compressed_calibrated_accel_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mG",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "compressed_calibrated_accel_y",
                Field {
                    name: "compressed_calibrated_accel_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mG",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "compressed_calibrated_accel_z",
                Field {
                    name: "compressed_calibrated_accel_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mG",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _magnetometer_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sample_time_offset",
                Field {
                    name: "sample_time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "mag_x",
                Field {
                    name: "mag_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "mag_y",
                Field {
                    name: "mag_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "mag_z",
                Field {
                    name: "mag_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "calibrated_mag_x",
                Field {
                    name: "calibrated_mag_x",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "G",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "calibrated_mag_y",
                Field {
                    name: "calibrated_mag_y",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "G",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "calibrated_mag_z",
                Field {
                    name: "calibrated_mag_z",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "G",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _barometer_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sample_time_offset",
                Field {
                    name: "sample_time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "baro_pres",
                Field {
                    name: "baro_pres",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Pa",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _three_d_sensor_calibration(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sensor_type",
                Field {
                    name: "sensor_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sensor_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SensorType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "calibration_factor",
                Field {
                    name: "calibration_factor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "accel_cal_factor",
                    Field {
                        name: "accel_cal_factor",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "g",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "gyro_cal_factor",
                    Field {
                        name: "gyro_cal_factor",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "deg/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        2 => {
            message_map.insert(
                "calibration_divisor",
                Field {
                    name: "calibration_divisor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "level_shift",
                Field {
                    name: "level_shift",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "offset_cal",
                Field {
                    name: "offset_cal",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(3),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "orientation_matrix",
                Field {
                    name: "orientation_matrix",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 65535.0,
                            offset: 0.0,
                            units: "",
                            array: Some(9),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _one_d_sensor_calibration(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sensor_type",
                Field {
                    name: "sensor_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sensor_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SensorType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "calibration_factor",
                Field {
                    name: "calibration_factor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "baro_cal_factor",
                    Field {
                        name: "baro_cal_factor",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "Pa",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        2 => {
            message_map.insert(
                "calibration_divisor",
                Field {
                    name: "calibration_divisor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "counts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "level_shift",
                Field {
                    name: "level_shift",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "offset_cal",
                Field {
                    name: "offset_cal",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _video_frame(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "frame_number",
                Field {
                    name: "frame_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _obdii_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "time_offset",
                Field {
                    name: "time_offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "pid",
                Field {
                    name: "pid",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "raw_data",
                Field {
                    name: "raw_data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "pid_data_size",
                Field {
                    name: "pid_data_size",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "system_time",
                Field {
                    name: "system_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "start_timestamp",
                Field {
                    name: "start_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "start_timestamp_ms",
                Field {
                    name: "start_timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _nmea_sentence(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sentence",
                Field {
                    name: "sentence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _aviation_attitude(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "system_time",
                Field {
                    name: "system_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "pitch",
                Field {
                    name: "pitch",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 10430.38,
                            offset: 0.0,
                            units: "radians",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "roll",
                Field {
                    name: "roll",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 10430.38,
                            offset: 0.0,
                            units: "radians",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "accel_lateral",
                Field {
                    name: "accel_lateral",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s^2",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "accel_normal",
                Field {
                    name: "accel_normal",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m/s^2",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "turn_rate",
                Field {
                    name: "turn_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "radians/second",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "stage",
                Field {
                    name: "stage",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "attitude_stage",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::AttitudeStage::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "attitude_stage_complete",
                Field {
                    name: "attitude_stage_complete",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "%",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "track",
                Field {
                    name: "track",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10430.38,
                            offset: 0.0,
                            units: "radians",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "validity",
                Field {
                    name: "validity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "attitude_validity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::AttitudeValidity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _video(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "url",
                Field {
                    name: "url",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "hosting_provider",
                Field {
                    name: "hosting_provider",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "duration",
                Field {
                    name: "duration",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _video_title(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "message_count",
                Field {
                    name: "message_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "text",
                Field {
                    name: "text",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _video_description(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "message_count",
                Field {
                    name: "message_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "text",
                Field {
                    name: "text",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _video_clip(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "clip_number",
                Field {
                    name: "clip_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "start_timestamp",
                Field {
                    name: "start_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_timestamp_ms",
                Field {
                    name: "start_timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "end_timestamp",
                Field {
                    name: "end_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "end_timestamp_ms",
                Field {
                    name: "end_timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "clip_start",
                Field {
                    name: "clip_start",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "clip_end",
                Field {
                    name: "clip_end",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _set(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "duration",
                Field {
                    name: "duration",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "repetitions",
                Field {
                    name: "repetitions",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "weight",
                Field {
                    name: "weight",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 16.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "set_type",
                Field {
                    name: "set_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "set_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SetType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "category",
                Field {
                    name: "category",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exercise_category",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::ExerciseCategory::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "category_subtype",
                Field {
                    name: "category_subtype",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "weight_display_unit",
                Field {
                    name: "weight_display_unit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "fit_base_unit",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::FitBaseUnit::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "wkt_step_index",
                Field {
                    name: "wkt_step_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _jump(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "height",
                Field {
                    name: "height",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "rotations",
                Field {
                    name: "rotations",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "hang_time",
                Field {
                    name: "hang_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "score",
                Field {
                    name: "score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "speed",
                Field {
                    name: "speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_speed",
                Field {
                    name: "enhanced_speed",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "enhanced_speed",
                Field {
                    name: "enhanced_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _split(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "split_type",
                Field {
                    name: "split_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "split_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SplitType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "total_elapsed_time",
                Field {
                    name: "total_elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "total_distance",
                Field {
                    name: "total_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _climb_pro(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "climb_pro_event",
                Field {
                    name: "climb_pro_event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "climb_pro_event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ClimbProEvent::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "climb_number",
                Field {
                    name: "climb_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "climb_category",
                Field {
                    name: "climb_category",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "current_dist",
                Field {
                    name: "current_dist",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Must be logged before developer field is used
fn _field_description(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "developer_data_index",
                Field {
                    name: "developer_data_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "field_definition_number",
                Field {
                    name: "field_definition_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "fit_base_type_id",
                Field {
                    name: "fit_base_type_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "fit_base_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::FitBaseType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "field_name",
                Field {
                    name: "field_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "array",
                Field {
                    name: "array",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "components",
                Field {
                    name: "components",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "scale",
                Field {
                    name: "scale",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "offset",
                Field {
                    name: "offset",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "units",
                Field {
                    name: "units",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "bits",
                Field {
                    name: "bits",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "accumulate",
                Field {
                    name: "accumulate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "fit_base_unit_id",
                Field {
                    name: "fit_base_unit_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "fit_base_unit",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::FitBaseUnit::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "native_mesg_num",
                Field {
                    name: "native_mesg_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "native_field_num",
                Field {
                    name: "native_field_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Must be logged before field description
fn _developer_data_id(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "developer_id",
                Field {
                    name: "developer_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "application_id",
                Field {
                    name: "application_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "manufacturer_id",
                Field {
                    name: "manufacturer_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "developer_data_index",
                Field {
                    name: "developer_data_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "application_version",
                Field {
                    name: "application_version",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _course(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        4 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "capabilities",
                Field {
                    name: "capabilities",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "course_capabilities",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::CourseCapabilities::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _course_point(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "course_point",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::CoursePoint::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "favorite",
                Field {
                    name: "favorite",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Unique Identification data for a segment file
fn _segment_id(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "uuid",
                Field {
                    name: "uuid",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "user_profile_primary_key",
                Field {
                    name: "user_profile_primary_key",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "device_id",
                Field {
                    name: "device_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "default_race_leader",
                Field {
                    name: "default_race_leader",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "delete_status",
                Field {
                    name: "delete_status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "segment_delete_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::SegmentDeleteStatus::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "selection_type",
                Field {
                    name: "selection_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "segment_selection_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::SegmentSelectionType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Unique Identification data for an individual segment leader within a segment file
fn _segment_leaderboard_entry(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "segment_leaderboard_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::SegmentLeaderboardType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "group_primary_key",
                Field {
                    name: "group_primary_key",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "activity_id",
                Field {
                    name: "activity_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "segment_time",
                Field {
                    name: "segment_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "activity_id_string",
                Field {
                    name: "activity_id_string",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Navigation and race evaluation point for a segment decribing a point along the segment path and time it took each segment leader to reach that point
fn _segment_point(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "position_lat",
                Field {
                    name: "position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "position_long",
                Field {
                    name: "position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "altitude",
                Field {
                    name: "altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_altitude",
                Field {
                    name: "enhanced_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "leader_time",
                Field {
                    name: "leader_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "enhanced_altitude",
                Field {
                    name: "enhanced_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _segment_lap(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "event",
                Field {
                    name: "event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Event::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "event_type",
                Field {
                    name: "event_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "event_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::EventType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "start_time",
                Field {
                    name: "start_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "start_position_lat",
                Field {
                    name: "start_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "start_position_long",
                Field {
                    name: "start_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "end_position_lat",
                Field {
                    name: "end_position_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "end_position_long",
                Field {
                    name: "end_position_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "total_elapsed_time",
                Field {
                    name: "total_elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "total_timer_time",
                Field {
                    name: "total_timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "total_distance",
                Field {
                    name: "total_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "total_cycles",
                Field {
                    name: "total_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&23u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "total_strokes",
                    Field {
                        name: "total_strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        11 => {
            message_map.insert(
                "total_calories",
                Field {
                    name: "total_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "total_fat_calories",
                Field {
                    name: "total_fat_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "avg_speed",
                Field {
                    name: "avg_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "max_speed",
                Field {
                    name: "max_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "avg_heart_rate",
                Field {
                    name: "avg_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "max_heart_rate",
                Field {
                    name: "max_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "avg_cadence",
                Field {
                    name: "avg_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        18 => {
            message_map.insert(
                "max_cadence",
                Field {
                    name: "max_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "avg_power",
                Field {
                    name: "avg_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "max_power",
                Field {
                    name: "max_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        21 => {
            message_map.insert(
                "total_ascent",
                Field {
                    name: "total_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "total_descent",
                Field {
                    name: "total_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "event_group",
                Field {
                    name: "event_group",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "nec_lat",
                Field {
                    name: "nec_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        26 => {
            message_map.insert(
                "nec_long",
                Field {
                    name: "nec_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        27 => {
            message_map.insert(
                "swc_lat",
                Field {
                    name: "swc_lat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        28 => {
            message_map.insert(
                "swc_long",
                Field {
                    name: "swc_long",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "semicircles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "name",
                Field {
                    name: "name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "normalized_power",
                Field {
                    name: "normalized_power",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        31 => {
            message_map.insert(
                "left_right_balance",
                Field {
                    name: "left_right_balance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "left_right_balance_100",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::LeftRightBalance100::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        33 => {
            message_map.insert(
                "total_work",
                Field {
                    name: "total_work",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "J",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        34 => {
            message_map.insert(
                "avg_altitude",
                Field {
                    name: "avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        35 => {
            message_map.insert(
                "max_altitude",
                Field {
                    name: "max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        36 => {
            message_map.insert(
                "gps_accuracy",
                Field {
                    name: "gps_accuracy",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        37 => {
            message_map.insert(
                "avg_grade",
                Field {
                    name: "avg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        38 => {
            message_map.insert(
                "avg_pos_grade",
                Field {
                    name: "avg_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        39 => {
            message_map.insert(
                "avg_neg_grade",
                Field {
                    name: "avg_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        40 => {
            message_map.insert(
                "max_pos_grade",
                Field {
                    name: "max_pos_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        41 => {
            message_map.insert(
                "max_neg_grade",
                Field {
                    name: "max_neg_grade",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        42 => {
            message_map.insert(
                "avg_temperature",
                Field {
                    name: "avg_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        43 => {
            message_map.insert(
                "max_temperature",
                Field {
                    name: "max_temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        44 => {
            message_map.insert(
                "total_moving_time",
                Field {
                    name: "total_moving_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        45 => {
            message_map.insert(
                "avg_pos_vertical_speed",
                Field {
                    name: "avg_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        46 => {
            message_map.insert(
                "avg_neg_vertical_speed",
                Field {
                    name: "avg_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        47 => {
            message_map.insert(
                "max_pos_vertical_speed",
                Field {
                    name: "max_pos_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        48 => {
            message_map.insert(
                "max_neg_vertical_speed",
                Field {
                    name: "max_neg_vertical_speed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        49 => {
            message_map.insert(
                "time_in_hr_zone",
                Field {
                    name: "time_in_hr_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        50 => {
            message_map.insert(
                "time_in_speed_zone",
                Field {
                    name: "time_in_speed_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        51 => {
            message_map.insert(
                "time_in_cadence_zone",
                Field {
                    name: "time_in_cadence_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        52 => {
            message_map.insert(
                "time_in_power_zone",
                Field {
                    name: "time_in_power_zone",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        53 => {
            message_map.insert(
                "repetition_num",
                Field {
                    name: "repetition_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        54 => {
            message_map.insert(
                "min_altitude",
                Field {
                    name: "min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(16).unwrap(),
                16,
            );
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        &fit::Value::UInt16(value as u16),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        55 => {
            message_map.insert(
                "min_heart_rate",
                Field {
                    name: "min_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        56 => {
            message_map.insert(
                "active_time",
                Field {
                    name: "active_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        57 => {
            message_map.insert(
                "wkt_step_index",
                Field {
                    name: "wkt_step_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        58 => {
            message_map.insert(
                "sport_event",
                Field {
                    name: "sport_event",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport_event",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SportEvent::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        59 => {
            message_map.insert(
                "avg_left_torque_effectiveness",
                Field {
                    name: "avg_left_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        60 => {
            message_map.insert(
                "avg_right_torque_effectiveness",
                Field {
                    name: "avg_right_torque_effectiveness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        61 => {
            message_map.insert(
                "avg_left_pedal_smoothness",
                Field {
                    name: "avg_left_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        62 => {
            message_map.insert(
                "avg_right_pedal_smoothness",
                Field {
                    name: "avg_right_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        63 => {
            message_map.insert(
                "avg_combined_pedal_smoothness",
                Field {
                    name: "avg_combined_pedal_smoothness",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        64 => {
            message_map.insert(
                "status",
                Field {
                    name: "status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "segment_lap_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SegmentLapStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        65 => {
            message_map.insert(
                "uuid",
                Field {
                    name: "uuid",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        66 => {
            message_map.insert(
                "avg_fractional_cadence",
                Field {
                    name: "avg_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        67 => {
            message_map.insert(
                "max_fractional_cadence",
                Field {
                    name: "max_fractional_cadence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "rpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        68 => {
            message_map.insert(
                "total_fractional_cycles",
                Field {
                    name: "total_fractional_cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        69 => {
            message_map.insert(
                "front_gear_shift_count",
                Field {
                    name: "front_gear_shift_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        70 => {
            message_map.insert(
                "rear_gear_shift_count",
                Field {
                    name: "rear_gear_shift_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        71 => {
            message_map.insert(
                "time_standing",
                Field {
                    name: "time_standing",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        72 => {
            message_map.insert(
                "stand_count",
                Field {
                    name: "stand_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        73 => {
            message_map.insert(
                "avg_left_pco",
                Field {
                    name: "avg_left_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        74 => {
            message_map.insert(
                "avg_right_pco",
                Field {
                    name: "avg_right_pco",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        75 => {
            message_map.insert(
                "avg_left_power_phase",
                Field {
                    name: "avg_left_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        76 => {
            message_map.insert(
                "avg_left_power_phase_peak",
                Field {
                    name: "avg_left_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        77 => {
            message_map.insert(
                "avg_right_power_phase",
                Field {
                    name: "avg_right_power_phase",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        78 => {
            message_map.insert(
                "avg_right_power_phase_peak",
                Field {
                    name: "avg_right_power_phase_peak",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 0.7111111,
                            offset: 0.0,
                            units: "degrees",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        79 => {
            message_map.insert(
                "avg_power_position",
                Field {
                    name: "avg_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        80 => {
            message_map.insert(
                "max_power_position",
                Field {
                    name: "max_power_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "watts",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        81 => {
            message_map.insert(
                "avg_cadence_position",
                Field {
                    name: "avg_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        82 => {
            message_map.insert(
                "max_cadence_position",
                Field {
                    name: "max_cadence_position",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "rpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        83 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        84 => {
            message_map.insert(
                "total_grit",
                Field {
                    name: "total_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        85 => {
            message_map.insert(
                "total_flow",
                Field {
                    name: "total_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        86 => {
            message_map.insert(
                "avg_grit",
                Field {
                    name: "avg_grit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kGrit",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        87 => {
            message_map.insert(
                "avg_flow",
                Field {
                    name: "avg_flow",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "float32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "Flow",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        89 => {
            message_map.insert(
                "total_fractional_ascent",
                Field {
                    name: "total_fractional_ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        90 => {
            message_map.insert(
                "total_fractional_descent",
                Field {
                    name: "total_fractional_descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        91 => {
            message_map.insert(
                "enhanced_avg_altitude",
                Field {
                    name: "enhanced_avg_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        92 => {
            message_map.insert(
                "enhanced_max_altitude",
                Field {
                    name: "enhanced_max_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        93 => {
            message_map.insert(
                "enhanced_min_altitude",
                Field {
                    name: "enhanced_min_altitude",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 5.0,
                            offset: 500.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Summary of the unique segment and leaderboard information associated with a segment file. This message is used to compile a segment list file describing all segment files on a device. The segment list file is used when refreshing the contents of a segment file with the latest available leaderboard information.
fn _segment_file(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "file_uuid",
                Field {
                    name: "file_uuid",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "enabled",
                Field {
                    name: "enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "user_profile_primary_key",
                Field {
                    name: "user_profile_primary_key",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "leader_type",
                Field {
                    name: "leader_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "segment_leaderboard_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| {
                                types::SegmentLeaderboardType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "leader_group_primary_key",
                Field {
                    name: "leader_group_primary_key",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "leader_activity_id",
                Field {
                    name: "leader_activity_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "leader_activity_id_string",
                Field {
                    name: "leader_activity_id_string",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "default_race_leader",
                Field {
                    name: "default_race_leader",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _workout(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "capabilities",
                Field {
                    name: "capabilities",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "workout_capabilities",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::WorkoutCapabilities::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "num_valid_steps",
                Field {
                    name: "num_valid_steps",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "wkt_name",
                Field {
                    name: "wkt_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "pool_length",
                Field {
                    name: "pool_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "pool_length_unit",
                Field {
                    name: "pool_length_unit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _workout_session(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "num_valid_steps",
                Field {
                    name: "num_valid_steps",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "first_step_index",
                Field {
                    name: "first_step_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "pool_length",
                Field {
                    name: "pool_length",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "pool_length_unit",
                Field {
                    name: "pool_length_unit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "display_measure",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DisplayMeasure::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _workout_step(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "wkt_step_name",
                Field {
                    name: "wkt_step_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "duration_type",
                Field {
                    name: "duration_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "wkt_step_duration",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WktStepDuration::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "duration_value",
                Field {
                    name: "duration_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "duration_time",
                    Field {
                        name: "duration_time",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(28)) {
                message_map.insert(
                    "duration_time",
                    Field {
                        name: "duration_time",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "duration_distance",
                    Field {
                        name: "duration_distance",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 100.0,
                                offset: 0.0,
                                units: "m",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "duration_hr",
                    Field {
                        name: "duration_hr",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "duration_hr",
                    Field {
                        name: "duration_hr",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "duration_calories",
                    Field {
                        name: "duration_calories",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "calories",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(6)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(7)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(8)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(9)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(10)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(12)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(13)) {
                message_map.insert(
                    "duration_step",
                    Field {
                        name: "duration_step",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(14)) {
                message_map.insert(
                    "duration_power",
                    Field {
                        name: "duration_power",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(15)) {
                message_map.insert(
                    "duration_power",
                    Field {
                        name: "duration_power",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(29)) {
                message_map.insert(
                    "duration_reps",
                    Field {
                        name: "duration_reps",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        3 => {
            message_map.insert(
                "target_type",
                Field {
                    name: "target_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "wkt_step_target",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WktStepTarget::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "target_value",
                Field {
                    name: "target_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "target_speed_zone",
                    Field {
                        name: "target_speed_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "target_hr_zone",
                    Field {
                        name: "target_hr_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "target_cadence_zone",
                    Field {
                        name: "target_cadence_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "target_power_zone",
                    Field {
                        name: "target_power_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(6)) {
                message_map.insert(
                    "repeat_steps",
                    Field {
                        name: "repeat_steps",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(7)) {
                message_map.insert(
                    "repeat_time",
                    Field {
                        name: "repeat_time",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(8)) {
                message_map.insert(
                    "repeat_distance",
                    Field {
                        name: "repeat_distance",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 100.0,
                                offset: 0.0,
                                units: "m",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(9)) {
                message_map.insert(
                    "repeat_calories",
                    Field {
                        name: "repeat_calories",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "calories",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(10)) {
                message_map.insert(
                    "repeat_hr",
                    Field {
                        name: "repeat_hr",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "repeat_hr",
                    Field {
                        name: "repeat_hr",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(12)) {
                message_map.insert(
                    "repeat_power",
                    Field {
                        name: "repeat_power",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&1u8) == Some(&fit::Value::Enum(13)) {
                message_map.insert(
                    "repeat_power",
                    Field {
                        name: "repeat_power",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "target_stroke_type",
                    Field {
                        name: "target_stroke_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "swim_stroke",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::SwimStroke::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        5 => {
            message_map.insert(
                "custom_target_value_low",
                Field {
                    name: "custom_target_value_low",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "custom_target_speed_low",
                    Field {
                        name: "custom_target_speed_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "custom_target_heart_rate_low",
                    Field {
                        name: "custom_target_heart_rate_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "custom_target_cadence_low",
                    Field {
                        name: "custom_target_cadence_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "custom_target_power_low",
                    Field {
                        name: "custom_target_power_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        6 => {
            message_map.insert(
                "custom_target_value_high",
                Field {
                    name: "custom_target_value_high",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "custom_target_speed_high",
                    Field {
                        name: "custom_target_speed_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "custom_target_heart_rate_high",
                    Field {
                        name: "custom_target_heart_rate_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "custom_target_cadence_high",
                    Field {
                        name: "custom_target_cadence_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&3u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "custom_target_power_high",
                    Field {
                        name: "custom_target_power_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        7 => {
            message_map.insert(
                "intensity",
                Field {
                    name: "intensity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "intensity",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Intensity::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "notes",
                Field {
                    name: "notes",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "equipment",
                Field {
                    name: "equipment",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "workout_equipment",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WorkoutEquipment::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "exercise_category",
                Field {
                    name: "exercise_category",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exercise_category",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExerciseCategory::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "exercise_name",
                Field {
                    name: "exercise_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "exercise_weight",
                Field {
                    name: "exercise_weight",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "weight_display_unit",
                Field {
                    name: "weight_display_unit",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "fit_base_unit",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::FitBaseUnit::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "secondary_target_type",
                Field {
                    name: "secondary_target_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "wkt_step_target",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::WktStepTarget::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        20 => {
            message_map.insert(
                "secondary_target_value",
                Field {
                    name: "secondary_target_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "secondary_target_speed_zone",
                    Field {
                        name: "secondary_target_speed_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "secondary_target_hr_zone",
                    Field {
                        name: "secondary_target_hr_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "secondary_target_cadence_zone",
                    Field {
                        name: "secondary_target_cadence_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "secondary_target_power_zone",
                    Field {
                        name: "secondary_target_power_zone",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(11)) {
                message_map.insert(
                    "secondary_target_stroke_type",
                    Field {
                        name: "secondary_target_stroke_type",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "swim_stroke",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::SwimStroke::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        21 => {
            message_map.insert(
                "secondary_custom_target_value_low",
                Field {
                    name: "secondary_custom_target_value_low",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "secondary_custom_target_speed_low",
                    Field {
                        name: "secondary_custom_target_speed_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "secondary_custom_target_heart_rate_low",
                    Field {
                        name: "secondary_custom_target_heart_rate_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "secondary_custom_target_cadence_low",
                    Field {
                        name: "secondary_custom_target_cadence_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "secondary_custom_target_power_low",
                    Field {
                        name: "secondary_custom_target_power_low",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        22 => {
            message_map.insert(
                "secondary_custom_target_value_high",
                Field {
                    name: "secondary_custom_target_value_high",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(0)) {
                message_map.insert(
                    "secondary_custom_target_speed_high",
                    Field {
                        name: "secondary_custom_target_speed_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1000.0,
                                offset: 0.0,
                                units: "m/s",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "secondary_custom_target_heart_rate_high",
                    Field {
                        name: "secondary_custom_target_heart_rate_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_hr",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or bpm",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutHr::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(3)) {
                message_map.insert(
                    "secondary_custom_target_cadence_high",
                    Field {
                        name: "secondary_custom_target_cadence_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "rpm",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&19u8) == Some(&fit::Value::Enum(4)) {
                message_map.insert(
                    "secondary_custom_target_power_high",
                    Field {
                        name: "secondary_custom_target_power_high",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "workout_power",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "% or watts",
                                array: None,
                                ty_to_str: Box::new(|val| types::WorkoutPower::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _exercise_title(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "exercise_category",
                Field {
                    name: "exercise_category",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exercise_category",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExerciseCategory::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "exercise_name",
                Field {
                    name: "exercise_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "wkt_step_name",
                Field {
                    name: "wkt_step_name",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _schedule(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "manufacturer",
                Field {
                    name: "manufacturer",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "manufacturer",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Manufacturer::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "product",
                Field {
                    name: "product",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(263)) {
                message_map.insert(
                    "favero_product",
                    Field {
                        name: "favero_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "favero_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::FaveroProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(1)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(15)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(13)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&0u8) == Some(&fit::Value::UInt16(89)) {
                message_map.insert(
                    "garmin_product",
                    Field {
                        name: "garmin_product",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "garmin_product",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "",
                                array: None,
                                ty_to_str: Box::new(|val| types::GarminProduct::try_from(val).ok()),
                                is_base_type: false,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        2 => {
            message_map.insert(
                "serial_number",
                Field {
                    name: "serial_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "time_created",
                Field {
                    name: "time_created",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "completed",
                Field {
                    name: "completed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "type",
                Field {
                    name: "type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "schedule",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Schedule::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "scheduled_time",
                Field {
                    name: "scheduled_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "local_date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocalDateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _totals(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        254 => {
            message_map.insert(
                "message_index",
                Field {
                    name: "message_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timer_time",
                Field {
                    name: "timer_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "calories",
                Field {
                    name: "calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "elapsed_time",
                Field {
                    name: "elapsed_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "sessions",
                Field {
                    name: "sessions",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "active_time",
                Field {
                    name: "active_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "sport_index",
                Field {
                    name: "sport_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _weight_scale(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "weight",
                Field {
                    name: "weight",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "weight",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| types::Weight::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "percent_fat",
                Field {
                    name: "percent_fat",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "percent_hydration",
                Field {
                    name: "percent_hydration",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "%",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "visceral_fat_mass",
                Field {
                    name: "visceral_fat_mass",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "bone_mass",
                Field {
                    name: "bone_mass",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "muscle_mass",
                Field {
                    name: "muscle_mass",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "kg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "basal_met",
                Field {
                    name: "basal_met",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 4.0,
                            offset: 0.0,
                            units: "kcal/day",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "physique_rating",
                Field {
                    name: "physique_rating",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "active_met",
                Field {
                    name: "active_met",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 4.0,
                            offset: 0.0,
                            units: "kcal/day",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "metabolic_age",
                Field {
                    name: "metabolic_age",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "years",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "visceral_fat_rating",
                Field {
                    name: "visceral_fat_rating",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "user_profile_index",
                Field {
                    name: "user_profile_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "bmi",
                Field {
                    name: "bmi",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "kg/m^2",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _blood_pressure(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "systolic_pressure",
                Field {
                    name: "systolic_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "diastolic_pressure",
                Field {
                    name: "diastolic_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "mean_arterial_pressure",
                Field {
                    name: "mean_arterial_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "map_3_sample_mean",
                Field {
                    name: "map_3_sample_mean",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "map_morning_values",
                Field {
                    name: "map_morning_values",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "map_evening_values",
                Field {
                    name: "map_evening_values",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "mmHg",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "heart_rate",
                Field {
                    name: "heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "heart_rate_type",
                Field {
                    name: "heart_rate_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "hr_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::HrType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "status",
                Field {
                    name: "status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bp_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::BpStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "user_profile_index",
                Field {
                    name: "user_profile_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _monitoring_info(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "local_timestamp",
                Field {
                    name: "local_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "local_date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocalDateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "activity_type",
                Field {
                    name: "activity_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| types::ActivityType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "cycles_to_distance",
                Field {
                    name: "cycles_to_distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5000.0,
                            offset: 0.0,
                            units: "m/cycle",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "cycles_to_calories",
                Field {
                    name: "cycles_to_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 5000.0,
                            offset: 0.0,
                            units: "kcal/cycle",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "resting_metabolic_rate",
                Field {
                    name: "resting_metabolic_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal / day",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _monitoring(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "calories",
                Field {
                    name: "calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "distance",
                Field {
                    name: "distance",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "cycles",
                Field {
                    name: "cycles",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 2.0,
                            offset: 0.0,
                            units: "cycles",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(6)) {
                message_map.insert(
                    "steps",
                    Field {
                        name: "steps",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "steps",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(1)) {
                message_map.insert(
                    "steps",
                    Field {
                        name: "steps",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 1.0,
                                offset: 0.0,
                                units: "steps",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(2)) {
                message_map.insert(
                    "strokes",
                    Field {
                        name: "strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 2.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            if args.fields.get(&5u8) == Some(&fit::Value::Enum(5)) {
                message_map.insert(
                    "strokes",
                    Field {
                        name: "strokes",
                        value: transform_value(
                            args.value,
                            TransformValueArgs {
                                field_ty: "uint32",
                                msg_ty: args.msg_ty,
                                scale: 2.0,
                                offset: 0.0,
                                units: "strokes",
                                array: None,
                                ty_to_str: Box::new(|val| Some(val.to_string())),
                                is_base_type: true,
                            },
                        )
                        .unwrap(),
                        is_subfield: true,
                    },
                );
            }
            Ok(())
        }
        4 => {
            message_map.insert(
                "active_time",
                Field {
                    name: "active_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "activity_type",
                Field {
                    name: "activity_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivityType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "activity_subtype",
                Field {
                    name: "activity_subtype",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_subtype",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivitySubtype::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "activity_level",
                Field {
                    name: "activity_level",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "activity_level",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ActivityLevel::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "distance_16",
                Field {
                    name: "distance_16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "100 * m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "cycles_16",
                Field {
                    name: "cycles_16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "2 * cycles (steps)",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "active_time_16",
                Field {
                    name: "active_time_16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "local_timestamp",
                Field {
                    name: "local_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "local_date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::LocalDateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "temperature",
                Field {
                    name: "temperature",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "temperature_min",
                Field {
                    name: "temperature_min",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "temperature_max",
                Field {
                    name: "temperature_max",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "C",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "activity_time",
                Field {
                    name: "activity_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "minutes",
                            array: Some(8),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        19 => {
            message_map.insert(
                "active_calories",
                Field {
                    name: "active_calories",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "kcal",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "current_activity_type_intensity",
                Field {
                    name: "current_activity_type_intensity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(5).unwrap(),
                5,
            );
            message_map.insert(
                "activity_type",
                Field {
                    name: "activity_type",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "activity_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(3).unwrap(),
                3,
            );
            message_map.insert(
                "intensity",
                Field {
                    name: "intensity",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "timestamp_min_8",
                Field {
                    name: "timestamp_min_8",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        26 => {
            message_map.insert(
                "timestamp_16",
                Field {
                    name: "timestamp_16",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        27 => {
            message_map.insert(
                "heart_rate",
                Field {
                    name: "heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        28 => {
            message_map.insert(
                "intensity",
                Field {
                    name: "intensity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        29 => {
            message_map.insert(
                "duration_min",
                Field {
                    name: "duration_min",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        30 => {
            message_map.insert(
                "duration",
                Field {
                    name: "duration",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        31 => {
            message_map.insert(
                "ascent",
                Field {
                    name: "ascent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        32 => {
            message_map.insert(
                "descent",
                Field {
                    name: "descent",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        33 => {
            message_map.insert(
                "moderate_activity_minutes",
                Field {
                    name: "moderate_activity_minutes",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "minutes",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        34 => {
            message_map.insert(
                "vigorous_activity_minutes",
                Field {
                    name: "vigorous_activity_minutes",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "minutes",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _monitoring_hr_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "resting_heart_rate",
                Field {
                    name: "resting_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "current_day_resting_heart_rate",
                Field {
                    name: "current_day_resting_heart_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _spo2_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "reading_spo2",
                Field {
                    name: "reading_spo2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "reading_confidence",
                Field {
                    name: "reading_confidence",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "mode",
                Field {
                    name: "mode",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "spo2_measurement_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::Spo2MeasurementType::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _hr(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "fractional_timestamp",
                Field {
                    name: "fractional_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 32768.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "time256",
                Field {
                    name: "time256",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 256.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "fractional_timestamp",
                Field {
                    name: "fractional_timestamp",
                    value: transform_value(
                        &fit::Value::UInt8(value as u8),
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 256.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "filtered_bpm",
                Field {
                    name: "filtered_bpm",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "bpm",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            accumulator.add(
                args.msg_no,
                args.field_no,
                args.value.try_as_usize().unwrap(),
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "event_timestamp_12",
                Field {
                    name: "event_timestamp_12",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(12).unwrap(),
                12,
            );
            message_map.insert(
                "event_timestamp",
                Field {
                    name: "event_timestamp",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1024.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Value from 1 to 100 calculated by FirstBeat
fn _stress_level(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "stress_level_value",
                Field {
                    name: "stress_level_value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "stress_level_time",
                Field {
                    name: "stress_level_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _max_met_data(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "update_time",
                Field {
                    name: "update_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "vo2_max",
                Field {
                    name: "vo2_max",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 10.0,
                            offset: 0.0,
                            units: "mL/kg/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "sport",
                Field {
                    name: "sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::Sport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "sub_sport",
                Field {
                    name: "sub_sport",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sub_sport",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SubSport::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "max_met_category",
                Field {
                    name: "max_met_category",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "max_met_category",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MaxMetCategory::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "calibrated_data",
                Field {
                    name: "calibrated_data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "hr_source",
                Field {
                    name: "hr_source",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "max_met_heart_rate_source",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| {
                                types::MaxMetHeartRateSource::try_from(val).ok()
                            }),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "speed_source",
                Field {
                    name: "speed_source",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "max_met_speed_source",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MaxMetSpeedSource::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _memo_glob(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        250 => {
            message_map.insert(
                "part_index",
                Field {
                    name: "part_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "memo",
                Field {
                    name: "memo",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "mesg_num",
                Field {
                    name: "mesg_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "parent_index",
                Field {
                    name: "parent_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "field_num",
                Field {
                    name: "field_num",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _sleep_level(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sleep_level",
                Field {
                    name: "sleep_level",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sleep_level",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::SleepLevel::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _ant_channel_id(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "channel_number",
                Field {
                    name: "channel_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "device_type",
                Field {
                    name: "device_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "device_number",
                Field {
                    name: "device_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "transmission_type",
                Field {
                    name: "transmission_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8z",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "device_index",
                Field {
                    name: "device_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "device_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DeviceIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _ant_rx(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "fractional_timestamp",
                Field {
                    name: "fractional_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 32768.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "mesg_id",
                Field {
                    name: "mesg_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "mesg_data",
                Field {
                    name: "mesg_data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "channel_number",
                Field {
                    name: "channel_number",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "channel_number",
                Field {
                    name: "channel_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _ant_tx(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "fractional_timestamp",
                Field {
                    name: "fractional_timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 32768.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "mesg_id",
                Field {
                    name: "mesg_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "mesg_data",
                Field {
                    name: "mesg_data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "channel_number",
                Field {
                    name: "channel_number",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(8).unwrap(),
                8,
            );
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "channel_number",
                Field {
                    name: "channel_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "data",
                Field {
                    name: "data",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _exd_screen_configuration(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "screen_index",
                Field {
                    name: "screen_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "field_count",
                Field {
                    name: "field_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "layout",
                Field {
                    name: "layout",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exd_layout",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExdLayout::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "screen_enabled",
                Field {
                    name: "screen_enabled",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _exd_data_field_configuration(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "screen_index",
                Field {
                    name: "screen_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "concept_field",
                Field {
                    name: "concept_field",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(4).unwrap(),
                4,
            );
            message_map.insert(
                "field_id",
                Field {
                    name: "field_id",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(4).unwrap(),
                4,
            );
            message_map.insert(
                "concept_count",
                Field {
                    name: "concept_count",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "field_id",
                Field {
                    name: "field_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "concept_count",
                Field {
                    name: "concept_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "display_type",
                Field {
                    name: "display_type",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exd_display_type",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExdDisplayType::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "title",
                Field {
                    name: "title",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "string",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: Some(32),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _exd_data_concept_configuration(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "screen_index",
                Field {
                    name: "screen_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "concept_field",
                Field {
                    name: "concept_field",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "byte",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            let mut bit_reader = BitReader::new(args.value.clone());

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(4).unwrap(),
                4,
            );
            message_map.insert(
                "field_id",
                Field {
                    name: "field_id",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );

            let value = accumulator.accumulate(
                args.msg_no,
                args.field_no,
                bit_reader.read_bits(4).unwrap(),
                4,
            );
            message_map.insert(
                "concept_index",
                Field {
                    name: "concept_index",
                    value: transform_value(
                        &fit::Value::Byte(value as u8),
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "field_id",
                Field {
                    name: "field_id",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "concept_index",
                Field {
                    name: "concept_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "data_page",
                Field {
                    name: "data_page",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "concept_key",
                Field {
                    name: "concept_key",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "scaling",
                Field {
                    name: "scaling",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "data_units",
                Field {
                    name: "data_units",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exd_data_units",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExdDataUnits::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "qualifier",
                Field {
                    name: "qualifier",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exd_qualifiers",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExdQualifiers::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "descriptor",
                Field {
                    name: "descriptor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "exd_descriptors",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::ExdDescriptors::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "is_signed",
                Field {
                    name: "is_signed",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "bool",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _dive_summary(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "reference_mesg",
                Field {
                    name: "reference_mesg",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "mesg_num",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MesgNum::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "reference_index",
                Field {
                    name: "reference_index",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "message_index",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::MessageIndex::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "avg_depth",
                Field {
                    name: "avg_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "max_depth",
                Field {
                    name: "max_depth",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "surface_interval",
                Field {
                    name: "surface_interval",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "start_cns",
                Field {
                    name: "start_cns",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "end_cns",
                Field {
                    name: "end_cns",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "start_n2",
                Field {
                    name: "start_n2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "end_n2",
                Field {
                    name: "end_n2",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "percent",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "o2_toxicity",
                Field {
                    name: "o2_toxicity",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "OTUs",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "dive_number",
                Field {
                    name: "dive_number",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "bottom_time",
                Field {
                    name: "bottom_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        12 => {
            message_map.insert(
                "avg_pressure_sac",
                Field {
                    name: "avg_pressure_sac",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "bar/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        13 => {
            message_map.insert(
                "avg_volume_sac",
                Field {
                    name: "avg_volume_sac",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "L/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "avg_rmv",
                Field {
                    name: "avg_rmv",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "L/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "descent_time",
                Field {
                    name: "descent_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        16 => {
            message_map.insert(
                "ascent_time",
                Field {
                    name: "ascent_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        17 => {
            message_map.insert(
                "avg_ascent_rate",
                Field {
                    name: "avg_ascent_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        22 => {
            message_map.insert(
                "avg_descent_rate",
                Field {
                    name: "avg_descent_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        23 => {
            message_map.insert(
                "max_ascent_rate",
                Field {
                    name: "max_ascent_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        24 => {
            message_map.insert(
                "max_descent_rate",
                Field {
                    name: "max_descent_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "m/s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        25 => {
            message_map.insert(
                "hang_time",
                Field {
                    name: "hang_time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Heart rate variability
fn _hrv(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "time",
                Field {
                    name: "time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1000.0,
                            offset: 0.0,
                            units: "s",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
/// Array of heart beat intervals
fn _beat_intervals(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "timestamp_ms",
                Field {
                    name: "timestamp_ms",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "time",
                Field {
                    name: "time",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "ms",
                            array: Some(0),
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _hrv_status_summary(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "weekly_average",
                Field {
                    name: "weekly_average",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "last_night_average",
                Field {
                    name: "last_night_average",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "last_night_5_min_high",
                Field {
                    name: "last_night_5_min_high",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "baseline_low_upper",
                Field {
                    name: "baseline_low_upper",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "baseline_balanced_lower",
                Field {
                    name: "baseline_balanced_lower",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "baseline_balanced_upper",
                Field {
                    name: "baseline_balanced_upper",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "status",
                Field {
                    name: "status",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "hrv_status",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::HrvStatus::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _hrv_value(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "value",
                Field {
                    name: "value",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 128.0,
                            offset: 0.0,
                            units: "ms",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _respiration_rate(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "respiration_rate",
                Field {
                    name: "respiration_rate",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "sint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "breaths/min",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _tank_update(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sensor",
                Field {
                    name: "sensor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "ant_channel_id",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::AntChannelId::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "pressure",
                Field {
                    name: "pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "bar",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _tank_summary(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        253 => {
            message_map.insert(
                "timestamp",
                Field {
                    name: "timestamp",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "date_time",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "s",
                            array: None,
                            ty_to_str: Box::new(|val| types::DateTime::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        0 => {
            message_map.insert(
                "sensor",
                Field {
                    name: "sensor",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "ant_channel_id",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| types::AntChannelId::try_from(val).ok()),
                            is_base_type: false,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "start_pressure",
                Field {
                    name: "start_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "bar",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "end_pressure",
                Field {
                    name: "end_pressure",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "bar",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "volume_used",
                Field {
                    name: "volume_used",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint32",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "L",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
fn _sleep_assessment(
    message_map: &mut HashMap<&'static str, Field>,
    accumulator: &mut crate::accumulator::Accumulator,
    args: MessageDecodeArgs,
) -> Result<(), String> {
    match args.field_no {
        0 => {
            message_map.insert(
                "combined_awake_score",
                Field {
                    name: "combined_awake_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        1 => {
            message_map.insert(
                "awake_time_score",
                Field {
                    name: "awake_time_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        2 => {
            message_map.insert(
                "awakenings_count_score",
                Field {
                    name: "awakenings_count_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        3 => {
            message_map.insert(
                "deep_sleep_score",
                Field {
                    name: "deep_sleep_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        4 => {
            message_map.insert(
                "sleep_duration_score",
                Field {
                    name: "sleep_duration_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        5 => {
            message_map.insert(
                "light_sleep_score",
                Field {
                    name: "light_sleep_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        6 => {
            message_map.insert(
                "overall_sleep_score",
                Field {
                    name: "overall_sleep_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        7 => {
            message_map.insert(
                "sleep_quality_score",
                Field {
                    name: "sleep_quality_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        8 => {
            message_map.insert(
                "sleep_recovery_score",
                Field {
                    name: "sleep_recovery_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        9 => {
            message_map.insert(
                "rem_sleep_score",
                Field {
                    name: "rem_sleep_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        10 => {
            message_map.insert(
                "sleep_restlessness_score",
                Field {
                    name: "sleep_restlessness_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        11 => {
            message_map.insert(
                "awakenings_count",
                Field {
                    name: "awakenings_count",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        14 => {
            message_map.insert(
                "interruptions_score",
                Field {
                    name: "interruptions_score",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint8",
                            msg_ty: args.msg_ty,
                            scale: 1.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        15 => {
            message_map.insert(
                "average_stress_during_sleep",
                Field {
                    name: "average_stress_during_sleep",
                    value: transform_value(
                        args.value,
                        TransformValueArgs {
                            field_ty: "uint16",
                            msg_ty: args.msg_ty,
                            scale: 100.0,
                            offset: 0.0,
                            units: "",
                            array: None,
                            ty_to_str: Box::new(|val| Some(val.to_string())),
                            is_base_type: true,
                        },
                    )
                    .unwrap(),
                    is_subfield: false,
                },
            );
            Ok(())
        }
        _ => Err(format!(
            "'{}' message does not exist '{}' field",
            args.msg_no, args.field_no
        )),
    }
}
pub(crate) fn from_message_type(message_type: &str) -> Option<MessageDecoder> {
    match message_type {
        "file_id" => Some(Box::new(_file_id)),
        "file_creator" => Some(Box::new(_file_creator)),
        "timestamp_correlation" => Some(Box::new(_timestamp_correlation)),
        "software" => Some(Box::new(_software)),
        "slave_device" => Some(Box::new(_slave_device)),
        "capabilities" => Some(Box::new(_capabilities)),
        "file_capabilities" => Some(Box::new(_file_capabilities)),
        "mesg_capabilities" => Some(Box::new(_mesg_capabilities)),
        "field_capabilities" => Some(Box::new(_field_capabilities)),
        "device_settings" => Some(Box::new(_device_settings)),
        "user_profile" => Some(Box::new(_user_profile)),
        "hrm_profile" => Some(Box::new(_hrm_profile)),
        "sdm_profile" => Some(Box::new(_sdm_profile)),
        "bike_profile" => Some(Box::new(_bike_profile)),
        "connectivity" => Some(Box::new(_connectivity)),
        "watchface_settings" => Some(Box::new(_watchface_settings)),
        "ohr_settings" => Some(Box::new(_ohr_settings)),
        "time_in_zone" => Some(Box::new(_time_in_zone)),
        "zones_target" => Some(Box::new(_zones_target)),
        "sport" => Some(Box::new(_sport)),
        "hr_zone" => Some(Box::new(_hr_zone)),
        "speed_zone" => Some(Box::new(_speed_zone)),
        "cadence_zone" => Some(Box::new(_cadence_zone)),
        "power_zone" => Some(Box::new(_power_zone)),
        "met_zone" => Some(Box::new(_met_zone)),
        "dive_settings" => Some(Box::new(_dive_settings)),
        "dive_alarm" => Some(Box::new(_dive_alarm)),
        "dive_apnea_alarm" => Some(Box::new(_dive_apnea_alarm)),
        "dive_gas" => Some(Box::new(_dive_gas)),
        "goal" => Some(Box::new(_goal)),
        "activity" => Some(Box::new(_activity)),
        "session" => Some(Box::new(_session)),
        "lap" => Some(Box::new(_lap)),
        "length" => Some(Box::new(_length)),
        "record" => Some(Box::new(_record)),
        "event" => Some(Box::new(_event)),
        "device_info" => Some(Box::new(_device_info)),
        "device_aux_battery_info" => Some(Box::new(_device_aux_battery_info)),
        "training_file" => Some(Box::new(_training_file)),
        "weather_conditions" => Some(Box::new(_weather_conditions)),
        "weather_alert" => Some(Box::new(_weather_alert)),
        "gps_metadata" => Some(Box::new(_gps_metadata)),
        "camera_event" => Some(Box::new(_camera_event)),
        "gyroscope_data" => Some(Box::new(_gyroscope_data)),
        "accelerometer_data" => Some(Box::new(_accelerometer_data)),
        "magnetometer_data" => Some(Box::new(_magnetometer_data)),
        "barometer_data" => Some(Box::new(_barometer_data)),
        "three_d_sensor_calibration" => Some(Box::new(_three_d_sensor_calibration)),
        "one_d_sensor_calibration" => Some(Box::new(_one_d_sensor_calibration)),
        "video_frame" => Some(Box::new(_video_frame)),
        "obdii_data" => Some(Box::new(_obdii_data)),
        "nmea_sentence" => Some(Box::new(_nmea_sentence)),
        "aviation_attitude" => Some(Box::new(_aviation_attitude)),
        "video" => Some(Box::new(_video)),
        "video_title" => Some(Box::new(_video_title)),
        "video_description" => Some(Box::new(_video_description)),
        "video_clip" => Some(Box::new(_video_clip)),
        "set" => Some(Box::new(_set)),
        "jump" => Some(Box::new(_jump)),
        "split" => Some(Box::new(_split)),
        "climb_pro" => Some(Box::new(_climb_pro)),
        "field_description" => Some(Box::new(_field_description)),
        "developer_data_id" => Some(Box::new(_developer_data_id)),
        "course" => Some(Box::new(_course)),
        "course_point" => Some(Box::new(_course_point)),
        "segment_id" => Some(Box::new(_segment_id)),
        "segment_leaderboard_entry" => Some(Box::new(_segment_leaderboard_entry)),
        "segment_point" => Some(Box::new(_segment_point)),
        "segment_lap" => Some(Box::new(_segment_lap)),
        "segment_file" => Some(Box::new(_segment_file)),
        "workout" => Some(Box::new(_workout)),
        "workout_session" => Some(Box::new(_workout_session)),
        "workout_step" => Some(Box::new(_workout_step)),
        "exercise_title" => Some(Box::new(_exercise_title)),
        "schedule" => Some(Box::new(_schedule)),
        "totals" => Some(Box::new(_totals)),
        "weight_scale" => Some(Box::new(_weight_scale)),
        "blood_pressure" => Some(Box::new(_blood_pressure)),
        "monitoring_info" => Some(Box::new(_monitoring_info)),
        "monitoring" => Some(Box::new(_monitoring)),
        "monitoring_hr_data" => Some(Box::new(_monitoring_hr_data)),
        "spo2_data" => Some(Box::new(_spo2_data)),
        "hr" => Some(Box::new(_hr)),
        "stress_level" => Some(Box::new(_stress_level)),
        "max_met_data" => Some(Box::new(_max_met_data)),
        "memo_glob" => Some(Box::new(_memo_glob)),
        "sleep_level" => Some(Box::new(_sleep_level)),
        "ant_channel_id" => Some(Box::new(_ant_channel_id)),
        "ant_rx" => Some(Box::new(_ant_rx)),
        "ant_tx" => Some(Box::new(_ant_tx)),
        "exd_screen_configuration" => Some(Box::new(_exd_screen_configuration)),
        "exd_data_field_configuration" => Some(Box::new(_exd_data_field_configuration)),
        "exd_data_concept_configuration" => Some(Box::new(_exd_data_concept_configuration)),
        "dive_summary" => Some(Box::new(_dive_summary)),
        "hrv" => Some(Box::new(_hrv)),
        "beat_intervals" => Some(Box::new(_beat_intervals)),
        "hrv_status_summary" => Some(Box::new(_hrv_status_summary)),
        "hrv_value" => Some(Box::new(_hrv_value)),
        "respiration_rate" => Some(Box::new(_respiration_rate)),
        "tank_update" => Some(Box::new(_tank_update)),
        "tank_summary" => Some(Box::new(_tank_summary)),
        "sleep_assessment" => Some(Box::new(_sleep_assessment)),
        _ => None,
    }
}
